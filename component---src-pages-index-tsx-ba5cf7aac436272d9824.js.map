{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/utils/typography.js","webpack:///./src/components/seo.tsx","webpack:///./src/components/header/Header.tsx","webpack:///./src/components/layout.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/bio.tsx"],"names":["BlogIndex","render","data","this","props","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_3__","location","_components_seo__WEBPACK_IMPORTED_MODULE_4__","_components_bio__WEBPACK_IMPORTED_MODULE_2__","map","_ref","node","frontmatter","fields","slug","key","style","marginBottom","rhythm","gatsby__WEBPACK_IMPORTED_MODULE_1__","boxShadow","to","date","dangerouslySetInnerHTML","__html","description","excerpt","React","Component","pageQuery","__webpack_require__","d","__webpack_exports__","scale","typography__WEBPACK_IMPORTED_MODULE_0__","typography__WEBPACK_IMPORTED_MODULE_0___default","n","typography_theme_wordpress_2016__WEBPACK_IMPORTED_MODULE_1__","typography_theme_wordpress_2016__WEBPACK_IMPORTED_MODULE_1___default","Wordpress2016","overrideThemeStyles","a.gatsby-resp-image-link","googleFonts","typography","Typography","SEO","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","Header","_219426047","react_default","className","Styles","es","gatsby_image_default","fixed","avatar","childImageSharp","alt","Layout","_this$props","children","marginLeft","marginRight","maxWidth","padding","Header_Header","Date","getFullYear","href","m","module","exports","require","default","react__WEBPACK_IMPORTED_MODULE_0__","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","loader","enqueue","createContext","ProdPageRenderer","pageResources","InternalPageRenderer","Object","assign","json","Bio","_public_static_d_1130368741_json__WEBPACK_IMPORTED_MODULE_1__","_data$site$siteMetada","social","react__WEBPACK_IMPORTED_MODULE_2___default","display","gatsby_image__WEBPACK_IMPORTED_MODULE_3___default","minWidth","borderRadius","imgStyle","twitter"],"mappings":"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","file":"component---src-pages-index-tsx-ba5cf7aac436272d9824.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Bio from '../components/bio'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport { rhythm } from '../utils/typography'\nimport { Site, MarkdownRemarkConnection } from '../graphql-types';\n\ntype Props = {\n  data: {\n    site: Site,\n    allMarkdownRemark: MarkdownRemarkConnection\n  },\n  location: Location\n}\n\nclass BlogIndex extends React.Component<Props> {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n        <Bio />\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n          return (\n            <article key={node.fields.slug}>\n              <header>\n                <h3\n                  style={{\n                    marginBottom: rhythm(1 / 4)\n                  }}\n                >\n                  <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                    {title}\n                  </Link>\n                </h3>\n                <small>{node.frontmatter.date}</small>\n              </header>\n              <section>\n                <p\n                  dangerouslySetInnerHTML={{\n                    __html: node.frontmatter.description || node.excerpt\n                  }}\n                />\n              </section>\n            </article>\n          )\n        })}\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n","import Typography from \"typography\"\nimport Wordpress2016 from \"typography-theme-wordpress-2016\"\n\nWordpress2016.overrideThemeStyles = () => {\n  return {\n    \"a.gatsby-resp-image-link\": {\n      boxShadow: `none`,\n    },\n  }\n}\n\ndelete Wordpress2016.googleFonts\n\nconst typography = new Typography(Wordpress2016)\n\n// Hot reload typography in development.\nif (process.env.NODE_ENV !== `production`) {\n  typography.injectStyles()\n}\n\nexport default typography\nexport const rhythm = typography.rhythm\nexport const scale = typography.scale\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { Site } from \"../graphql-types\";\n\ntype Props = {\n  description?: string,\n  lang?: string,\n  meta?: object[],\n  title: string\n}\n\ntype QueryProps = {\n  site: Site\n}\n\nfunction SEO<Props>({ description, lang, meta, title }) {\n  const { site } = useStaticQuery<QueryProps>(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nexport default SEO\n","import React, { FunctionComponent } from 'react'\nimport Styles from './Header.module.styl'\n\nimport Image from 'gatsby-image'\nimport { Link } from '@reach/router'\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { File } from '../../graphql-types'\n\ntype Props = {\n  avatar: File\n}\n\nexport const Header: FunctionComponent = props => {\n\n  const data = useStaticQuery<Props>(graphql`\n    query HeaderQuery {\n      avatar: file(absolutePath: {regex: \"/logo.png/\"}) {\n        childImageSharp {\n          fixed(width: 50, height: 50) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <div className={Styles['header']}>\n      <div className={Styles['logo']}>\n        <Link className={Styles['home']} to='/'>\n          <Image\n            fixed={data.avatar.childImageSharp.fixed}\n            alt={'icon'}\n          />\n        </Link>\n      </div>\n      <div className={Styles['nav-bar']}>\n        <div className={Styles['nav-item']}>\n          <i className='iconfont'>&#xe608;</i>\n        </div>\n        <div className={Styles['nav-item']}>about</div>\n        <div className={Styles['nav-item']}>home</div>\n        <div className={Styles['nav-item']}>test</div>\n      </div>\n    </div>\n  )\n}","import React from 'react'\n\nimport { rhythm } from '../utils/typography'\nimport { Header } from './header';\n\ntype Props = {\n  location: Location,\n  title: string,\n}\n\nclass Layout extends React.Component<Props> {\n  render() {\n    const { children, title } = this.props\n\n    return (\n      <div\n        style={{\n          marginLeft: `auto`,\n          marginRight: `auto`,\n          maxWidth: rhythm(24),\n          padding: `${rhythm(1.5)} ${rhythm(3 / 4)}`\n        }}\n      >\n        <Header />\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n        </footer>\n      </div>\n    )\n  }\n}\n\nexport default Layout\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport Image from 'gatsby-image'\n\nimport { rhythm } from '../utils/typography'\nimport { Site, File } from '../graphql-types'\n\ntype Props = {\n  site: Site,\n  avatar: File\n}\n\nconst Bio = () => {\n  // 查询必须指定路径，获取响应式图片\n  const data = useStaticQuery<Props>(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/me.jpeg/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  const { author, social } = data.site.siteMetadata\n  return (\n    <div\n      style={{\n        display: `flex`,\n        marginBottom: rhythm(2.5)\n      }}\n    >\n      <Image\n        fixed={data.avatar.childImageSharp.fixed}\n        alt={author}\n        style={{\n          marginRight: rhythm(1 / 2),\n          marginBottom: 0,\n          minWidth: 50,\n          borderRadius: `100%`\n        }}\n        imgStyle={{\n          borderRadius: `50%`\n        }}\n      />\n      <p>\n        Written by <strong>{author}</strong> who lives and works in ShangHai\n        building useful things.\n        {` `}\n        <a href={`https://twitter.com/${social.twitter}`}>\n          You should follow him on Twitter\n        </a>\n      </p>\n    </div>\n  )\n}\n\nexport default Bio\n"],"sourceRoot":""}