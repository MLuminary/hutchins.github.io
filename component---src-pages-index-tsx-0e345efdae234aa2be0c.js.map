{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/components/seo.tsx","webpack:///./src/utils/typography.js","webpack:///./src/components/header/Header.tsx","webpack:///./src/components/layout.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["monthInEng","BlogIndex","render","data","this","props","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_2__","location","_components_seo__WEBPACK_IMPORTED_MODULE_3__","map","_ref","node","frontmatter","fields","slug","className","Styles","key","Date","date","getMonth","getDay","getFullYear","gatsby__WEBPACK_IMPORTED_MODULE_1__","to","tags","tag","Fragment","timeToRead","description","excerpt","React","Component","pageQuery","SEO","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","__webpack_require__","d","__webpack_exports__","rhythm","scale","typography__WEBPACK_IMPORTED_MODULE_0__","typography__WEBPACK_IMPORTED_MODULE_0___default","n","typography_theme_wordpress_2016__WEBPACK_IMPORTED_MODULE_1__","typography_theme_wordpress_2016__WEBPACK_IMPORTED_MODULE_1___default","Wordpress2016","overrideThemeStyles","a.gatsby-resp-image-link","boxShadow","googleFonts","typography","Typography","Header","_823847756","react_default","es","gatsby_image_default","fixed","avatar","childImageSharp","alt","href","target","rel","Layout","_this$props","children","post","Header_Header","seo","style","marginLeft","marginRight","maxWidth","padding","m","module","exports","require","default","react__WEBPACK_IMPORTED_MODULE_0__","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","loader","enqueue","createContext","ProdPageRenderer","pageResources","InternalPageRenderer","Object","assign","json"],"mappings":"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","file":"component---src-pages-index-tsx-0e345efdae234aa2be0c.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport { Site, MarkdownRemarkConnection } from '../graphql-types';\nimport Styles from '../styles/pages/index.module.styl'\n\ntype Props = {\n  data: {\n    site: Site,\n    allMarkdownRemark: MarkdownRemarkConnection\n  },\n  location: Location\n}\n\nconst monthInEng = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']\n\nclass BlogIndex extends React.Component<Props> {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n          return (\n            <div className={Styles['post']} key={node.fields.slug}>\n              <div className={Styles['date']}>\n                <div className={Styles['up']}>\n                  <div className={Styles['month']}>{monthInEng[new Date(node.frontmatter.date).getMonth()]}</div>\n                  <div className={Styles['day']}>{new Date(node.frontmatter.date).getDay()}</div>\n                </div>\n                <div className={Styles['year']}>{new Date(node.frontmatter.date).getFullYear()}</div>\n              </div>\n              <div className={Styles['content']}>\n                <div className={Styles['header']}>\n                  <Link className={Styles['title']} to={node.fields.slug}>\n                    {title}\n                  </Link>\n                </div>\n                <div className={Styles['info']}>\n                  {\n                    node.frontmatter.tags.map(tag => (\n                      <>\n                        <i className='iconfont'>&#xe63e;</i>\n                        <Link to='/tags' className={Styles['tag']}>{tag}</Link>\n                        <span className={Styles['line']}>·</span>\n                      </>\n                    ))\n                  }\n                  {node.timeToRead + 1} min read\n                  <span className={Styles['time']}>\n                    <span className={Styles['line']}>·</span>\n                    {new Date(node.frontmatter.date).getFullYear()}<span>年</span>\n                    {new Date(node.frontmatter.date).getMonth() + 1}<span>月</span>\n                    {new Date(node.frontmatter.date).getDay()}<span>日</span>\n                  </span>\n                </div>\n                <div className={Styles['brief']}>\n                  <p>\n                    {node.frontmatter.description || node.excerpt}\n                  </p>\n                </div>\n                <Link to={node.fields.slug} className={Styles['more']}>Read More</Link>\n              </div>\n            </div>\n          )\n        })}\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date\n            title\n            description\n            tags\n          }\n          timeToRead\n        }\n      }\n    }\n  }\n`\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { Site } from '../graphql-types'\n\ntype Props = {\n  description?: string,\n  lang?: string,\n  meta?: object[],\n  title: string\n}\n\ntype QueryProps = {\n  site: Site\n}\n\nfunction SEO({ description, lang, meta, title }: Props) {\n  const { site } = useStaticQuery<QueryProps>(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `zh`,\n  meta: [],\n  description: ``,\n}\n\nexport default SEO\n","import Typography from \"typography\"\nimport Wordpress2016 from \"typography-theme-wordpress-2016\"\n\nWordpress2016.overrideThemeStyles = () => {\n  return {\n    \"a.gatsby-resp-image-link\": {\n      boxShadow: `none`,\n    },\n    \"a\": {\n      boxShadow: `none`,\n    }\n  }\n}\n\ndelete Wordpress2016.googleFonts\n\nconst typography = new Typography(Wordpress2016)\n\n// Hot reload typography in development.\nif (process.env.NODE_ENV !== `production`) {\n  typography.injectStyles()\n}\n\nexport default typography\nexport const rhythm = typography.rhythm\nexport const scale = typography.scale\n","import React, { FunctionComponent } from 'react'\nimport Styles from './Header.module.styl'\n\nimport Image from 'gatsby-image'\nimport { Link } from '@reach/router'\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { File } from '../../graphql-types'\n\ntype Props = {\n  avatar: File\n}\n\nexport const Header: FunctionComponent = props => {\n\n  const data = useStaticQuery<Props>(graphql`\n    query HeaderQuery {\n      avatar: file(absolutePath: {regex: \"/logo.png/\"}) {\n        childImageSharp {\n          fixed(width: 45, height: 45) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <div className={Styles['container']}>\n      <div className={Styles['header']}>\n        <div className={Styles['logo']}>\n          <Link className={Styles['home']} to='/'>\n            <Image\n              fixed={data.avatar.childImageSharp.fixed}\n              alt={'icon'}\n            />\n          </Link>\n        </div>\n        <div className={Styles['navbar']}>\n          <Link to='/' className={Styles['item']}>\n            <i className='iconfont'>&#xe64f;</i>\n            <span className={Styles['title']}>首页</span>\n          </Link>\n          <Link to='/tags' className={Styles['item']}>\n            <i className='iconfont'>&#xe63e;</i>\n            <span className={Styles['title']}>标签</span>\n          </Link>\n          <Link to='/handbook' className={Styles['item']}>\n            <i className='iconfont'>&#xe898;</i>\n            <span className={Styles['title']}>手册</span>\n          </Link>\n          <a className={Styles['item']} href=\"https://github.com/MLuminary\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <i className='iconfont'>&#xe716;</i>\n            <span className={Styles['title']}>GitHub</span>\n          </a>\n          <Link to='/about' className={Styles['item']}>\n            <i className='iconfont'>&#xe604;</i>\n            <span className={Styles['title']}>关于</span>\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}","import React from 'react'\n\nimport { rhythm } from '../utils/typography'\nimport { Header } from './header';\nimport SEO from './seo';\nimport { MarkdownRemark } from '../graphql-types';\n\ntype Props = {\n  location: Location,\n  title: string,\n  post?: MarkdownRemark\n}\n\nclass Layout extends React.Component<Props> {\n  render() {\n    const { children, title, post } = this.props\n    const description = post ? post.frontmatter ? post.frontmatter.description : '' : ''\n    return (\n      <>\n        <Header />\n        <SEO\n          title={title}\n          description={description}\n        />\n        <div\n          style={{\n            marginLeft: `auto`,\n            marginRight: `auto`,\n            maxWidth: rhythm(32),\n            padding: `${rhythm(1.5)} ${rhythm(3 / 4)}`\n          }}\n        >\n\n          <main>{children}</main>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default Layout\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}