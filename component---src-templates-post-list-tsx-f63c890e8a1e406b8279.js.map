{"version":3,"sources":["webpack:///./src/templates/post-list.tsx","webpack:///./src/components/seo.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header/Header.tsx","webpack:///./src/components/layout/layout.tsx"],"names":["__webpack_require__","r","__webpack_exports__","d","query","gatsby__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_1___default","n","react_paginate__WEBPACK_IMPORTED_MODULE_2__","react_paginate__WEBPACK_IMPORTED_MODULE_2___default","_styles_templates_post_list_module_styl__WEBPACK_IMPORTED_MODULE_3__","_styles_templates_post_list_module_styl__WEBPACK_IMPORTED_MODULE_3___default","_components_layout_layout__WEBPACK_IMPORTED_MODULE_4__","_components_seo__WEBPACK_IMPORTED_MODULE_5__","react_markdown__WEBPACK_IMPORTED_MODULE_6__","react_markdown__WEBPACK_IMPORTED_MODULE_6___default","react_spring__WEBPACK_IMPORTED_MODULE_7__","monthInEng","BlogPostList","props","data","siteTitle","site","siteMetadata","title","_data$allMarkdownRema","allMarkdownRemark","posts","edges","totalCount","_props$pageContext","pageContext","page","size","limit","pageCount","Math","ceil","transitions","useTransition","post","node","fields","slug","from","transform","opacity","enter","config","duration","trail","a","createElement","location","map","_ref","item","key","frontmatter","div","className","Styles","style","Date","date","getMonth","getDay","getFullYear","to","tags","tag","Fragment","timeToRead","source","description","excerpt","pageRangeDisplayed","previousLabel","initialPage","nextLabel","onPageChange","selected","navigate","containerClassName","SEO","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","m","module","exports","require","default","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","loader","enqueue","React","createContext","ProdPageRenderer","pageResources","InternalPageRenderer","Object","assign","json","Header","_823847756","react_default","es","gatsby_image_default","fixed","avatar","childImageSharp","alt","href","target","rel","Layout","render","_this$props","this","children","Header_Header","seo","Component"],"mappings":"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","file":"component---src-templates-post-list-tsx-f63c890e8a1e406b8279.js","sourcesContent":["import { graphql, Link, navigate } from 'gatsby'\nimport React, { FunctionComponent } from 'react'\nimport { MarkdownRemarkConnection, Site } from '../graphql-types'\nimport ReactPaginate from 'react-paginate'\nimport Styles from '../styles/templates/post-list.module.styl'\nimport Layout from '../components/layout/layout'\nimport SEO from '../components/seo'\nimport ReactMarkdown from 'react-markdown'\nimport { Footer } from '../components/footer'\nimport { animated, useTransition } from 'react-spring'\n\ntype Props = {\n  data: {\n    allMarkdownRemark: MarkdownRemarkConnection\n    site: Site\n  }\n  pageContext: {\n    page: number\n    limit: number\n    skip: number\n  }\n  location: Location\n}\n\nconst monthInEng = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']\n\nconst BlogPostList: FunctionComponent<Props> = props => {\n  const { data } = props\n  const { title: siteTitle } = data.site.siteMetadata\n  const { edges: posts, totalCount } = data.allMarkdownRemark\n  const { page, limit: size } = props.pageContext\n\n  const pageCount = Math.ceil(totalCount / size)\n\n  const transitions = useTransition(posts, post => post.node.fields.slug, {\n    from: { transform: 'translate3d(200px,0,0)', opacity: 0 },\n    enter: { transform: 'translate3d(0,0px,0)', opacity: 1 },\n    config: { duration: 150 },\n    trail: 5,\n  })\n\n  const handlePageChangeClick = (data: { selected: number }) => {\n    const page = data.selected + 1\n    if (page === 1) {\n      navigate('/posts')\n      return\n    }\n\n    navigate(`/posts/page/${page}`)\n  }\n\n  return (\n    <Layout location={props.location} title={siteTitle}>\n      <SEO title='All posts' />\n      {transitions.map(({ item: { node }, props, key }) => {\n        const title = node.frontmatter.title || node.fields.slug\n        return (\n          <animated.div className={Styles['post']} key={key} style={props}>\n            <div className={Styles['date']}>\n              <div className={Styles['up']}>\n                <div className={Styles['month']}>{monthInEng[new Date(node.frontmatter.date).getMonth()]}</div>\n                <div className={Styles['day']}>{new Date(node.frontmatter.date).getDay()}</div>\n              </div>\n              <div className={Styles['year']}>{new Date(node.frontmatter.date).getFullYear()}</div>\n            </div>\n            <div className={Styles['content']}>\n              <div className={Styles['header']}>\n                <Link className={Styles['title']} to={`/post-${node.frontmatter.date}`}>\n                  {title}\n                </Link>\n              </div>\n              <div className={Styles['info']}>\n                {node.frontmatter.tags.map(tag => (\n                  <React.Fragment key={tag}>\n                    <i className='iconfont'>&#xe63e;</i>\n                    <Link to='/tags' className={Styles['tag']}>\n                      {tag}\n                    </Link>\n                    <span className={Styles['line']}>·</span>\n                  </React.Fragment>\n                ))}\n                {node.timeToRead + 1} min read\n                <span className={Styles['time']}>\n                  <span className={Styles['line']}>·</span>\n                  {new Date(node.frontmatter.date).getFullYear()}\n                  <span>年</span>\n                  {new Date(node.frontmatter.date).getMonth() + 1}\n                  <span>月</span>\n                  {new Date(node.frontmatter.date).getDay()}\n                  <span>日</span>\n                </span>\n              </div>\n              <div className={Styles['brief']}>\n                <ReactMarkdown source={node.frontmatter.description || node.excerpt} />\n              </div>\n              <Link to={`/post-${node.frontmatter.date}`} className={Styles['more']}>\n                Read More\n              </Link>\n            </div>\n          </animated.div>\n        )\n      })}\n      <ReactPaginate\n        pageCount={pageCount}\n        pageRangeDisplayed={size}\n        previousLabel={'←'}\n        initialPage={page}\n        nextLabel={'→'}\n        onPageChange={handlePageChangeClick}\n        containerClassName={Styles['pagination']}\n        // breakClassName={Styles['li']}\n        // breakLinkClassName={Styles['a']}\n      />\n    </Layout>\n  )\n}\n\nexport default BlogPostList\n\nexport const query = graphql`\n  query PostListQuery($skip: Int, $limit: Int) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(limit: $limit, skip: $skip, sort: { order: DESC, fields: frontmatter___date }) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            description\n            tags\n            title\n          }\n          fields {\n            slug\n          }\n          fileAbsolutePath\n          wordCount {\n            words\n          }\n          timeToRead\n        }\n      }\n    }\n    dataYaml {\n      createPageConfig {\n        activeLayout\n        posts {\n          listPath\n        }\n      }\n    }\n  }\n`\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { Site } from '../graphql-types'\n\ntype Props = {\n  description?: string,\n  lang?: string,\n  meta?: object[],\n  title: string\n}\n\ntype QueryProps = {\n  site: Site\n}\n\nfunction SEO({ description, lang, meta, title }: Props) {\n  const { site } = useStaticQuery<QueryProps>(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `zh`,\n  meta: [],\n  description: ``,\n}\n\nexport default SEO\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React, { FunctionComponent } from 'react'\nimport Styles from './Header.module.styl'\n\nimport Image from 'gatsby-image'\nimport { Link } from '@reach/router'\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { File } from '../../graphql-types'\n\ntype Props = {\n  avatar: File\n}\n\nexport const Header: FunctionComponent = props => {\n\n  const data = useStaticQuery<Props>(graphql`\n    query HeaderQuery {\n      avatar: file(absolutePath: {regex: \"/logo.png/\"}) {\n        childImageSharp {\n          fixed(width: 45, height: 45) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <div className={Styles['container']}>\n      <div className={Styles['header']}>\n        <div className={Styles['logo']}>\n          <Link className={Styles['home']} to='/'>\n            <Image\n              fixed={data.avatar.childImageSharp.fixed}\n              alt={'icon'}\n            />\n          </Link>\n        </div>\n        <div className={Styles['navbar']}>\n          <Link to='/' className={Styles['item']}>\n            <i className='iconfont'>&#xe64f;</i>\n            <span className={Styles['title']}>首页</span>\n          </Link>\n          {/* <Link to='/tags' className={Styles['item']}>\n            <i className='iconfont'>&#xe63e;</i>\n            <span className={Styles['title']}>标签</span>\n          </Link>\n          <Link to='/handbook' className={Styles['item']}>\n            <i className='iconfont'>&#xe898;</i>\n            <span className={Styles['title']}>手册</span>\n          </Link> */}\n          <a className={Styles['item']} href=\"https://github.com/MLuminary\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <i className='iconfont'>&#xe716;</i>\n            <span className={Styles['title']}>GitHub</span>\n          </a>\n          <Link to='/about' className={Styles['item']}>\n            <i className='iconfont'>&#xe604;</i>\n            <span className={Styles['title']}>关于</span>\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}","import React from 'react'\n\nimport { Header } from '../header';\nimport SEO from '../seo';\nimport { MarkdownRemark } from '../../graphql-types';\nimport { Footer } from '../footer';\nimport Styles from './layout.module.styl'\n\ntype Props = {\n  location: Location,\n  title: string,\n  post?: MarkdownRemark\n}\n\nclass Layout extends React.Component<Props> {\n  render() {\n    const { children, title, post } = this.props\n    const description = post ? post.frontmatter ? post.frontmatter.description : '' : ''\n    return (\n      <div className={Styles['container']}>\n        <Header />\n        <SEO\n          title={title}\n          description={description}\n        />\n        <div className={Styles['content']}>\n          {children}\n        </div>\n        {/* <Footer /> */}\n      </div>\n    )\n  }\n}\n\nexport default Layout\n"],"sourceRoot":""}