{"version":3,"sources":["webpack:///./src/styles/pages/tags.module.styl","webpack:///./src/pages/tags.tsx"],"names":["module","exports","Styles","require","Tags","location","data","allMarkdownRemark","site","tags","useMemo","_tags","edges","forEach","edge","concat","node","frontmatter","Array","from","Set","sort","useState","selectedTag","setSelectedTag","posts","filter","some","tag","cardCls","className","map","onClick","classnames","key","post","console","info","path","Date","date","getTime","id","query"],"mappings":"+EACAA,EAAOC,QAAU,CAAC,KAAO,2BAA2B,KAAO,2BAA2B,OAAS,6BAA6B,SAAW,+BAA+B,OAAS,+B,kCCD/K,+HAQMC,EAASC,EAAQ,QA4DRC,UAlDwB,SAAC,GAAoD,EAAlDC,SAAkD,QAAxCC,KAAcC,GAA0B,EAAhCC,KAAgC,EAA1BD,mBAC1DE,EAAOC,mBAAkB,WAC7B,IAAIC,EAAkB,GAKtB,OAHAJ,EAAkBK,MAAMC,SAAQ,SAAAC,GAAQ,QACtCH,EAAQA,EAAMI,OAAN,oBAAaD,EAAKE,KAAKC,mBAAvB,aAAa,EAAuBR,YAApC,QAA4C,OAE/CS,MAAMC,KAAK,IAAIC,IAAIT,IAAQU,SACjC,CAACd,EAAkBK,QARoE,EAUpDU,mBAASb,EAAK,IAA7Cc,EAVmF,KAUtEC,EAVsE,KAYpFC,EAAQf,mBAAQ,kBAAMH,EAAkBK,MAAMc,QAAO,SAAAZ,GAAI,yBAAIA,EAAKE,KAAKC,mBAAd,iBAAI,EAAuBR,YAA3B,aAAI,EAA6BkB,MAAK,SAAAC,GAAG,OAAIA,IAAQL,UAAe,CACjIA,IAGF,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMM,QAAS3B,EAAM,MACnB,yBAAK4B,UAAW5B,EAAM,QAAtB,UACA,yBAAK4B,UAAW5B,EAAM,OACtB,yBAAK4B,UAAW5B,EAAM,WACnBO,EAAKsB,KAAI,SAAAH,GAAG,aACX,0BACEI,QAAS,kBAAMR,EAAeI,IAC9BE,UAAWG,IAAW/B,EAAM,UAAP,OAAwBA,EAAM,QAAaqB,IAAgBK,EAA3D,IACrBM,IAAKN,GAHP,IAKIA,QAKTH,EAAMM,KAAI,SAAAI,GAAQ,MAEjB,OADAC,QAAQC,KAAKF,GAEXA,EAAKnB,MACH,kBAAC,IAAD,CACEsB,KAAI,eAAiB,IAAIC,KAAJ,UAASJ,EAAKnB,KAAKC,mBAAnB,aAAS,EAAuBuB,MAAMC,UAC3DP,IAAKC,EAAKnB,KAAK0B,GACf1B,KAAMmB,EAAKnB,KACXc,UAAW5B,EAAM,iBAWxB,IAAMyC,EAAQ","file":"component---src-pages-tags-tsx-2ac5fc62e670c1f7a4fc.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"tags-module--card--2iMh_\",\"line\":\"tags-module--line--36Ccs\",\"header\":\"tags-module--header--1m3zz\",\"tag_item\":\"tags-module--tag_item--3VtSD\",\"active\":\"tags-module--active--1_Ktf\"};","import React, { FunctionComponent, useMemo, useState } from 'react'\nimport Layout from '../components/layout/layout'\nimport { MarkdownRemarkConnection, Site } from '@/graphql-types'\nimport classnames from 'classnames'\nimport { PostItem } from '../components/post-item'\nimport { graphql } from 'gatsby'\nimport { Card } from '../components/card'\n\nconst Styles = require('../styles/pages/tags.module.styl')\n\ntype Props = {\n  data: {\n    allMarkdownRemark: MarkdownRemarkConnection\n    site: Site\n  }\n  location: Location\n}\n\nconst Tags: FunctionComponent<Props> = ({ location, data: { site, allMarkdownRemark } }) => {\n  const tags = useMemo<string[]>(() => {\n    let _tags: string[] = []\n\n    allMarkdownRemark.edges.forEach(edge => {\n      _tags = _tags.concat(edge.node.frontmatter?.tags ?? [])\n    })\n    return Array.from(new Set(_tags)).sort()\n  }, [allMarkdownRemark.edges])\n\n  const [selectedTag, setSelectedTag] = useState(tags[0])\n\n  const posts = useMemo(() => allMarkdownRemark.edges.filter(edge => edge.node.frontmatter?.tags?.some(tag => tag === selectedTag)), [\n    selectedTag,\n  ])\n\n  return (\n    <Layout>\n      <Card cardCls={Styles['card']}>\n        <div className={Styles['header']}> Tags </div>\n        <div className={Styles['line']} />\n        <div className={Styles['tags_wrap']}>\n          {tags.map(tag => (\n            <span\n              onClick={() => setSelectedTag(tag)}\n              className={classnames(Styles['tag_item'], { [Styles['active']]: selectedTag === tag })}\n              key={tag}\n            >\n              #{tag}\n            </span>\n          ))}\n        </div>\n      </Card>\n      {posts.map(post => {\n        console.info(post)\n        return (\n          post.node && (\n            <PostItem\n              path={`/posts/post-${new Date(post.node.frontmatter?.date).getTime()}`}\n              key={post.node.id}\n              node={post.node}\n              className={Styles['post_item']}\n            />\n          )\n        )\n      })}\n    </Layout>\n  )\n}\n\nexport default Tags\n\nexport const query = graphql`\n  query TagQuery {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(filter: { fileAbsolutePath: { regex: \"/blog/\" } }) {\n      edges {\n        node {\n          id\n          frontmatter {\n            date\n            description\n            tags\n            title\n          }\n          fields {\n            slug\n          }\n          fileAbsolutePath\n          wordCount {\n            words\n          }\n          timeToRead\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}