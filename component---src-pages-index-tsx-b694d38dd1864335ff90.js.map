{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/components/seo.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["Styles","require","Me","props","data","spring","useSpring","opacity","transform","from","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_seo__WEBPACK_IMPORTED_MODULE_3__","title","react_spring__WEBPACK_IMPORTED_MODULE_4__","div","style","className","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","pageQuery","SEO","_ref","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","m","module","exports","default","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","__webpack_exports__","loader","enqueue","React","createContext","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json"],"mappings":"8LAQMA,EAASC,EAAQ,KAoCRC,UA3BsB,SAAAC,GAClBA,EAATC,KADoC,IAGtCC,EAASC,YAAU,CAAEC,QAAS,EAAGC,UAAW,qBAAsBC,KAAM,CAAEF,QAAS,EAAGC,UAAW,2BAEvG,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,MAAM,YACXJ,EAAAC,EAAAC,cAACG,EAAA,EAASC,IAAV,CAAcC,MAAOZ,EAAQa,UAAWlB,EAAM,SAC5CU,EAAAC,EAAAC,cAAA,OAAKM,UAAWlB,EAAM,SACtBU,EAAAC,EAAAC,cAAA,OAAKM,UAAWlB,EAAM,MAAtB,gBACAU,EAAAC,EAAAC,cAAA,OAAKM,UAAWlB,EAAM,OACtBU,EAAAC,EAAAC,cAAA,OAAKM,UAAWlB,EAAM,MAAtB,gBACAU,EAAAC,EAAAC,cAAA,OAAKM,UAAWlB,EAAM,UAAtB,iCAMAU,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMD,UAAWlB,EAAM,MAAWoB,GAAG,UAArC,YAUD,IAAMC,EAAS,8FCvBtB,SAASC,EAATC,GAAwD,IAAzCC,EAAyCD,EAAzCC,YAAaC,EAA4BF,EAA5BE,KAAMC,EAAsBH,EAAtBG,KAAMZ,EAAgBS,EAAhBT,MAC9Ba,EAD8CC,EAAAxB,KAC9CuB,KAcFE,EAAkBL,GAAeG,EAAKG,aAAaN,YAEzD,OACEd,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CACEqB,eAAgB,CACdP,QAEFX,MAAOA,EACPmB,cAAa,QAAUN,EAAKG,aAAahB,MACzCY,KAAM,CACJ,CACEQ,KAAI,cACJC,QAASN,GAEX,CACEO,SAAQ,WACRD,QAASrB,GAEX,CACEsB,SAAQ,iBACRD,QAASN,GAEX,CACEO,SAAQ,UACRD,QAAO,WAET,CACED,KAAI,eACJC,QAAO,WAET,CACED,KAAI,kBACJC,QAASR,EAAKG,aAAaO,QAE7B,CACEH,KAAI,gBACJC,QAASrB,GAEX,CACEoB,KAAI,sBACJC,QAASN,IAEXS,OAAOZ,KAKfJ,EAAIiB,aAAe,CACjBd,KAAI,KACJC,KAAM,GACNF,YAAW,IAGEF,2BC3Ff,IAAsBkB,EAKpBC,EAAOC,SALaF,EAKWvC,EAAQ,OALRuC,EAAEG,SAAYH,2JCA/C,IAAAI,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,IAAAI,EAAAJ,EAAAE,EAAAC,GAAAH,EAAAK,EAAAC,EAAA,sBAAAF,EAAAtC,IAAAkC,EAAAK,EAAAC,EAAA,sBAAAH,EAAA,WAAAH,EAAA,KAAAA,EAAA,IAcyBO,QAAOC,QAELC,IAAMC,cAAc,gFCMhCC,UAjBU,SAAAjC,GAAiC,IAA9BkC,EAA8BlC,EAA9BkC,SAAUC,EAAoBnC,EAApBmC,cACpC,OAAKA,EAGEJ,IAAM1C,cAAc+C,IAApBC,OAAAC,OAAA,CACLJ,WACAC,iBACGA,EAAcI,OALV","file":"component---src-pages-index-tsx-b694d38dd1864335ff90.js","sourcesContent":["import React, { FunctionComponent } from 'react'\nimport { graphql, Link } from 'gatsby'\nimport Layout from '../components/layout/layout'\nimport SEO from '../components/seo'\nimport { Site } from '../graphql-types'\nimport { AudioPlay, AudioWrap } from '../components/AudioPlayer/'\nimport { animated, useSpring } from 'react-spring'\n\nconst Styles = require('../styles/pages/index.module.styl')\n\ntype Props = {\n  data: {\n    site: Site\n  }\n  location: Location\n}\n\nconst Me: FunctionComponent<Props> = props => {\n  const { data } = props\n\n  const spring = useSpring({ opacity: 1, transform: 'translate3d(0,0,0)', from: { opacity: 0, transform: 'translate3d(0,-30%,0)' } })\n\n  return (\n    <div>\n      <SEO title=\"it's me\" />\n      <animated.div style={spring} className={Styles['content']}>\n        <div className={Styles['avatar']} />\n        <div className={Styles['name']}>Haoqin Zhang</div>\n        <div className={Styles['line']} />\n        <div className={Styles['info']}>Coding Lover</div>\n        <div className={Styles['loveWord']}>痛苦是财富，这话是扯淡。痛苦就是痛苦，对痛苦的思考才是财富</div>\n        {/* <div className={Styles['music']}>\n          <AudioWrap>\n            <AudioPlay sources={['../music/me.mp3']} />\n          </AudioWrap>\n        </div> */}\n        <Link className={Styles['enter']} to='/posts'>\n          Enter\n        </Link>\n      </animated.div>\n    </div>\n  )\n}\n\nexport default Me\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { Site } from '../graphql-types'\n\ntype Props = {\n  description?: string,\n  lang?: string,\n  meta?: object[],\n  title: string\n}\n\ntype QueryProps = {\n  site: Site\n}\n\nfunction SEO({ description, lang, meta, title }: Props) {\n  const { site } = useStaticQuery<QueryProps>(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `zh`,\n  meta: [],\n  description: ``,\n}\n\nexport default SEO\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}