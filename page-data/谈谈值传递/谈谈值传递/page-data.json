{"componentChunkName":"component---src-templates-blog-post-js","path":"/谈谈值传递/谈谈值传递/","webpackCompilationHash":"cea69ba45a95e3fb5ce5","result":{"data":{"site":{"siteMetadata":{"title":"Silence","author":"默尝"}},"markdownRemark":{"id":"9067e3b7-e708-599a-b597-069a1e1c60bd","excerpt":"ECMAScript…","html":"<p>ECMAScript 变量可能包含两种不同的数据类型：「基本数据类型」和「引用数据类型」，这两种类型的值传递是存在不同的.</p>\n<p>在我们谈这两种数据类型的值传递前，为了便于理解，我想首先谈一下这两种数据类型有关复制操作存在的不同</p>\n<h2>数据类型的复制</h2>\n<h3>基本类型</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> num2 <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">;</span>\nnum2 <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//10</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//11</span></code></pre></div>\n<p>基本数据类型从一个复制到另一个，会在变量对象上<strong>创建</strong>一个新值，然后把该值复制到新变量分配的位置上，改变其中一个不会影响另一个。</p>\n<p>本小白用拙劣的画功演示一下</p>\n<p><img src=\"%E8%B0%88%E8%B0%88%E5%80%BC%E4%BC%A0%E9%80%92/pic1.jpg\" alt=\"pic1\"></p>\n<p>一开始声明变量 <code class=\"language-text\">num1</code> 并赋值为 <code class=\"language-text\">10</code>,它便以图中的形式存放在栈内存中，当用 <code class=\"language-text\">num1</code> 的值来初始化 <code class=\"language-text\">num2</code> 的时候，此时就相当于声明变量 <code class=\"language-text\">num2</code> 并赋值为 <code class=\"language-text\">num1</code> 中的值，<strong>该值只是 <code class=\"language-text\">num1</code> 中的一个副本</strong>，赋值结束，这两个变量便再无瓜葛，进行后面的操作也不会相互影响</p>\n<h3>引用类型</h3>\n<p>引用类型我们采用数组来讲解，数组的声明有两种方式，一种为 <code class=\"language-text\">var 数组名 = []</code> 另一种为 <code class=\"language-text\">var 数组名 = new array()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">;</span>\narr2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[10,2,3,4]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[10,2,3,4]</span></code></pre></div>\n<p>可以看出输出的结果都为 <code class=\"language-text\">[10,2,3,4]</code>， 和基本数据类型完全不同。数组的存储方式如下图所示</p>\n<p><img src=\"%E8%B0%88%E8%B0%88%E5%80%BC%E4%BC%A0%E9%80%92/pic2.jpg\" alt=\"pic2\"></p>\n<p>当声明数组变量并赋值的时候，同样也会存入一个结构当中，但是这个结构不能存 <code class=\"language-text\">[1,2,3,4]</code> 这种数据，要存到堆内存中去，就是图片右边那个圆形的区域，但是存入的数据还是要找到它，每个存储位置都有相应的地址，所以它在栈内存中存入的是一个指向数组对象的这样的一个地址。</p>\n<p><img src=\"%E8%B0%88%E8%B0%88%E5%80%BC%E4%BC%A0%E9%80%92/pic3.jpg\" alt=\"pic3\"></p>\n<p>当复制引用类型变量的时候，同样也会将存储在栈内存中的值复制一份放到为新变量分配的空间中去，只不过因为这个值的副本是一个指向堆中原数组对象的地址，两个变量名就相当于引用了同一个地址中的内容。因此，改变其中的一个，就相当于改变了另一个。</p>\n<p>再看下面这个栗子:chestnut:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr4 <span class=\"token operator\">=</span> arr3<span class=\"token punctuation\">;</span>\narr4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[1,2,3,4]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[5,6,7,8]</span></code></pre></div>\n<p>这个相比于前面那个，只是在第三行代码中出现了不同，<code class=\"language-text\">arr4 = []</code> 这样也是创建数组的一种方式，因此 <code class=\"language-text\">arr4=[5,6,7,8]</code> 是将一个新创建的数组对象赋给变量 <code class=\"language-text\">arr4</code> ,这时 <code class=\"language-text\">arr4</code> 后的地址就改变了,也就指向了新的数组对象，这两个变量也就完全不相同了.</p>\n<p><img src=\"%E8%B0%88%E8%B0%88%E5%80%BC%E4%BC%A0%E9%80%92/pic4.jpg\" alt=\"pic4\"></p>\n<p>方便理解可以看下下面的代码</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//false</span></code></pre></div>\n<p>那好，现在有了这些铺垫，我们再来谈我们今天的主要内容.</p>\n<h2>数据类型的值传递</h2>\n<h3>基本类型</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  num <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//11</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">change</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//10</span></code></pre></div>\n<p>在向参数传递基本类型的值时，被传递的值会被先复制给一个局部变量，其实就可以理解为基本数据类型的赋值。以上的代码也可以写为这样</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//look</span>\n  num <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//11</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">change</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//10</span></code></pre></div>\n<p>在 look 处，函数会将参数先声明并赋值，值就为下面传入的参数的值，<code class=\"language-text\">num</code> 的值为 <code class=\"language-text\">10</code>,因此赋得值也为 <code class=\"language-text\">10</code>。但此时函数中的 <code class=\"language-text\">num</code> 和函数外部的 <code class=\"language-text\">num</code> 其实是毫不相关的，因此并不会相互影响</p>\n<h3>引用类型</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[10,2,3,4]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">change</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[10,2,3,4]</span></code></pre></div>\n<p>引用类型也如此，也可以理解为引用类型的复制操作，在函数的开头就会将 <code class=\"language-text\">arr</code> 赋值为传来的数值，虽然也是一开始声明的引用类型的副本，但是因为引用类型传来的数值是地址，因此函数中的 <code class=\"language-text\">arr</code> 和函数外面的 <code class=\"language-text\">arr</code> 都将引用同一个地址中的数组对象，因为 <code class=\"language-text\">arr</code> 指向的数组对象在堆中只有一个，又是全局变量，因此这两个 <code class=\"language-text\">arr</code> 是相同的，同样我们再看那一种声明数组并赋值的.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[4,5,6,7]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">change</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[1,2,3,4]</span></code></pre></div>\n<p>那这个也就应该可以理解了，虽然在传参的时候传入的确实是一开始声明的数组对象的地址的副本，但是因为在函数内部又声明了一个新的数组对象，在这里 <code class=\"language-text\">arr</code> 引用的就是一个局部的数组对象了，而这个局部对象就会在函数结束后立即被销毁，不会影响函数外部的数组对象</p>","frontmatter":{"title":"谈谈值传递","date":"July 25, 2017","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/谈谈值传递/谈谈值传递/","previous":{"fields":{"slug":"/关于css实现div居中问题/"},"frontmatter":{"title":"关于 css 实现 div 居中问题"}},"next":{"fields":{"slug":"/你好！BFC/"},"frontmatter":{"title":"你好！BFC!"}}}}}