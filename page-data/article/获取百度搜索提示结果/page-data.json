{"componentChunkName":"component---src-templates-blog-post-js","path":"/article/获取百度搜索提示结果/","webpackCompilationHash":"cea69ba45a95e3fb5ce5","result":{"data":{"site":{"siteMetadata":{"title":"Silence","author":"默尝"}},"markdownRemark":{"id":"5601ce8f-8d07-5997-8538-dbcffe9d8c41","excerpt":"获取百度搜索提示结果 引言 最近自己想做的项目需要一个搜索框，并想实现如下搜索提示的功能 pg1 本来觉得查查 network 随便抓取一下就可以获得到数据，但事情却不是这么简单 过程 在百度在随便输入字符，查看 network，找到此时请求的链接 pg2 会发现使用 get…","html":"<h2>获取百度搜索提示结果</h2>\n<h3>引言</h3>\n<p>最近自己想做的项目需要一个搜索框，并想实现如下搜索提示的功能</p>\n<p><img src=\"E:%5Cwrokspace%5Cblog%5Carticle%5C%E8%8E%B7%E5%8F%96%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E6%8F%90%E7%A4%BA%E7%BB%93%E6%9E%9C%5Cpg1.jpg\" alt=\"pg1\"></p>\n<p>本来觉得查查 network 随便抓取一下就可以获得到数据，但事情却不是这么简单</p>\n<h3>过程</h3>\n<p>在百度在随便输入字符，查看 network，找到此时请求的链接</p>\n<p><img src=\"E:%5Cwrokspace%5Cblog%5Carticle%5C%E8%8E%B7%E5%8F%96%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E6%8F%90%E7%A4%BA%E7%BB%93%E6%9E%9C%5Cpg2.png\" alt=\"pg2\"></p>\n<p>会发现使用 get 方式传了四个值,其中 <code class=\"language-text\">p</code> 和 <code class=\"language-text\">cb</code> 都是可以固定的，剩下的就是关键字 <code class=\"language-text\">wd</code> 和此时的时间戳 <code class=\"language-text\">t</code>，自己因为本身是 vue 的项目，就用 <code class=\"language-text\">axios</code> 对此进行请求，结果报错为 <strong>跨域</strong> 并且 <strong>中文乱码</strong></p>\n<h4>gzip</h4>\n<p>因为发生了跨域，因此就想用 <code class=\"language-text\">node</code> 去修改请求头去请求，「后来发现用 <code class=\"language-text\">node</code> 去请求不需要修改请求头也不会跨域」，但是还有一个问题返回的中文都是乱码。然后我就去关注了一下响应头，如上面的图片，其中 <code class=\"language-text\">content-encoding: gzip</code> 引起了我的注意。</p>\n<p>gzip 是什么在此我就不做过多的解释，去网上查只是说想要<strong>获取 gzip 格式的网页信息需要解压，要不然获得到的信息会是乱码</strong>，其中用到了 <code class=\"language-text\">zlib</code> 和 <code class=\"language-text\">request</code> 两个包</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  zlib <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zlib'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">response</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> body</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//check res header it is gzip</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'content-encoding'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//now body it is gzip stream buffer</span>\n      zlib<span class=\"token punctuation\">.</span><span class=\"token function\">unzip</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> buffer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        url <span class=\"token punctuation\">:</span> apiUrl<span class=\"token punctuation\">,</span>\n        headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'Accept-Encoding'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'gzip'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        encoding <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>  <span class=\"token comment\">// it is very import!!</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>但是我满怀期待的将其解压提取信息后获得的结果依然是乱码，make my heart cold cold</p>\n<p><strong>gbk</strong></p>\n<p>最后又把目光转向响应头，感觉 <code class=\"language-text\">charset=gbk</code> 好像有点东西, 其中用到了 <code class=\"language-text\">iconv-lite</code> ，是一个转编码的工具，<code class=\"language-text\">iconv.decode</code> 接受到第一个参数必须是 <code class=\"language-text\">buffer</code>, 而 <code class=\"language-text\">request</code> 获取到的信息返回的也是 <code class=\"language-text\">buffer</code> 我就感觉冥冥之中放佛预示着什么</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        url<span class=\"token punctuation\">,</span>\n        encoding <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> body</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json; charset=utf-8'</span><span class=\"token punctuation\">)</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>iconv<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> <span class=\"token string\">'gbk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>因此将响应头设置为 utf-8 并将其 gbk 编码转换为 utf-8 后成功的获得到了需要的信息, 下面就是将此 api 部署到我自己的服务器上，关于部署碰到的一些问题基本都在我另一篇文章中有谈到 <a href=\"https://github.com/MLuminary/Blog/issues/15\">记一次oneinstack配置服务器</a></p>\n<p><a href=\"https://github.com/MLuminary/Blog/issues/16\">阅读原文</a></p>","frontmatter":{"title":"","date":null,"description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/article/获取百度搜索提示结果/","previous":{"fields":{"slug":"/article/让服务器带点绿/"},"frontmatter":{"title":""}},"next":{"fields":{"slug":"/article/性感慕课-在线被爬/"},"frontmatter":{"title":""}}}}}