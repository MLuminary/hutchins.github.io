{"componentChunkName":"component---src-templates-post-detail-tsx","path":"/FlexDisplyRoom/","webpackCompilationHash":"d26d329850f03a37d00b","result":{"data":{"site":{"siteMetadata":{"title":"Silence","author":"默尝"}},"markdownRemark":{"id":"11847914-002f-517e-80df-75dd9c905831","excerpt":"FlexDisplayRoom 前段时间面试发现有很多都问 flex 布局，就觉得灰常有必要去学习一下，浏览了一遍阮一峰大神写的教程后掌握了基本理论，但始终觉得应该实践一下，偶然看到了这样一个网站 https://demos.scotch.io/visual-guide-to-css3-flexbox-flexbox…","html":"<h1>FlexDisplayRoom</h1>\n<blockquote>\n<p>前段时间面试发现有很多都问 flex 布局，就觉得灰常有必要去学习一下，浏览了一遍<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?%5E%25$\">阮一峰大神写的教程</a>后掌握了基本理论，但始终觉得应该实践一下，偶然看到了这样一个网站</p>\n</blockquote>\n<p><a href=\"https://demos.scotch.io/visual-guide-to-css3-flexbox-flexbox-playground/demos/\">https://demos.scotch.io/visual-guide-to-css3-flexbox-flexbox-playground/demos/</a></p>\n<p><strong>应该要翻墙</strong>才能进去，这个网页在手机端需要不断的上下滑动，个人感觉有必要修改一下，就萌生了也做一个类似的想法，当然自己手机端做的也不是那么好，但是在做的过程中也学到了一些适应手机端的一些知识</p>\n<p><a href=\"http://www.haoqinzz.cn/FlexDisplayRoom/\">项目展示地址</a></p>\n<p><a href=\"https://github.com/MLuminary/subentry/tree/master/FlexDisplayRoom\">项目源码地址</a></p>\n<h2>Flex 布局的基础知识</h2>\n<p>采用 flex 布局的元素，称为 Flex 容器，它的所有子元素自动成为容器成员，成为 Flex 项目</p>\n<h3>容器的属性</h3>\n<p>以下属性第一个取值为默认值</p>\n<p><strong>flex-direction</strong></p>\n<ul>\n<li>row : 主轴为水平方向，起点在左端</li>\n<li>row-reverse : 主轴为水平方向，起点在右侧</li>\n<li>column : 主轴为垂直方向，起点在上沿</li>\n<li>column-reverse : 主轴为垂直方向，起点在下沿</li>\n</ul>\n<p><strong>flex-wrap</strong></p>\n<ul>\n<li>nowrap : 不换行</li>\n<li>wrap : 换行，第一行在上方</li>\n<li>wrap-reverse: 换行，第一行在下方</li>\n</ul>\n<p><strong>flex-flow</strong></p>\n<p><code class=\"language-text\">flex-flow</code> 是 <code class=\"language-text\">flex-direction</code> 和 <code class=\"language-text\">flex-wrap</code> 的简写形式，默认值为 <code class=\"language-text\">row nowrap</code></p>\n<p><strong>justify-content</strong></p>\n<ul>\n<li>flex-start : 左对齐</li>\n<li>flex-end : 右对齐</li>\n<li>center : 居中</li>\n<li>space-between : 两端对齐，项目之间间隔都相等</li>\n<li>space-around : 每个项目两侧的间隔相等</li>\n</ul>\n<p><strong>align-items</strong></p>\n<ul>\n<li>stretch : 如果项目未设置高度或设为 auto ，将占满整个容器的高度</li>\n<li>flex-start : 交叉轴的起点对齐</li>\n<li>flex-end : 交叉轴的终点对齐</li>\n<li>center : 交叉轴的中点对齐</li>\n<li>baseline : 项目的第一行文字的基线对齐</li>\n</ul>\n<p><strong>align-content</strong></p>\n<ul>\n<li>stretch : 轴线占满整个交叉轴</li>\n<li>flex-start : 与交叉轴的起点对齐。</li>\n<li>flex-end : 与交叉轴的终点对齐。</li>\n<li>center : 与交叉轴的中点对齐。</li>\n<li>space-between : 与交叉轴两端对齐，轴线之间的间隔平均分布。</li>\n<li>space-around : 每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>\n</ul>\n<h3>项目的属性</h3>\n<p><strong>order</strong></p>\n<p>定义项目的排列顺序，属性值越小，排列越靠前，默认为 0</p>\n<p><strong>flex-grow</strong></p>\n<p>定义项目的放大比例，默认为 0 ，即如果存在剩余空间也不放大</p>\n<p><strong>flex-shrink</strong></p>\n<p>定义项目的缩小比例，默认为 1 ，即如果空间不足，项目将自动缩小，负值对该属性无效</p>\n<p><strong>flex-basis</strong></p>\n<p>定义了在分配多余空间之前，项目占据的主轴空间。默认值为 <code class=\"language-text\">auto</code> 即项目本来的大小</p>\n<p><strong>flex</strong></p>\n<p><code class=\"language-text\">flex</code> 是 <code class=\"language-text\">flex-grow</code>、<code class=\"language-text\">flex-shrink</code> 和 <code class=\"language-text\">flex-basis</code> 的简写，默认值为 <code class=\"language-text\">0 1 auto</code></p>\n<p>该属性有两个快捷值 : <code class=\"language-text\">auto</code>(<code class=\"language-text\">1 1 auto</code>) 和 <code class=\"language-text\">none</code>(<code class=\"language-text\">0 0 auto</code>)</p>\n<p><strong>align-self</strong></p>\n<p><code class=\"language-text\">align-self</code> 允许单个项目与其它项目有不一样的对其方式，可覆盖 <code class=\"language-text\">align-items</code>。默认值为 <code class=\"language-text\">auto</code>，表示继承父元素的 <code class=\"language-text\">align-items</code> 属性</p>","frontmatter":{"title":"FlexDisplayRoom","date":"May 20, 2018"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/FlexDisplyRoom/","previous":{"fields":{"slug":"/记一次oneinstack配置服务器/"},"frontmatter":{"title":"记一次 oneinstack 配置服务器"}},"next":{"fields":{"slug":"/跨域问题总结/"},"frontmatter":{"title":"跨域问题总结"}}}}}