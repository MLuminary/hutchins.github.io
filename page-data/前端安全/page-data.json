{"componentChunkName":"component---src-templates-post-detail-tsx","path":"/前端安全/","webpackCompilationHash":"e103595526b0ab0f1965","result":{"data":{"site":{"siteMetadata":{"title":"Silence","author":"默尝"}},"markdownRemark":{"id":"8a02d0c6-875e-57dd-95d3-013338204840","excerpt":"前端安全 最近一直在准备面试，被问到了解 XSS 时答出不了解还是很惭愧的，作为前端开发人员，安全这方面是必须要非常重视的，因此决定拿出了一段时间来重点了解一下关于前端的安全问题，在这里以 XSS 和 CSRF 为主 XSS XSS「Cross-site script」因为与 CSS 简写重合所以改为 XSS…","html":"<h1>前端安全</h1>\n<blockquote>\n<p>最近一直在准备面试，被问到了解 XSS 时答出不了解还是很惭愧的，作为前端开发人员，安全这方面是必须要非常重视的，因此决定拿出了一段时间来重点了解一下关于前端的安全问题，在这里以 XSS 和 CSRF 为主</p>\n</blockquote>\n<h2>XSS</h2>\n<p>XSS「Cross-site script」因为与 CSS 简写重合所以改为 XSS</p>\n<p>其原理是向网站中插入恶意的 HTML 代码。当其他用户浏览该网站的时候，该段 HTML 代码会自动执行，从而达到攻击的目的。如盗取用户的 Cookie，页面重定向，破坏页面结构</p>\n<p><strong>举个栗子</strong>:chestnut:</p>\n<p>网站的评论系统没有过滤 XSS 攻击，当有用户添加评论为</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>这段代码就会插入到此网站的 DOM 结构中，因为没有过滤掉或进行处理，此段代码也会执行。</p>\n<h3>XSS 分类</h3>\n<p>XSS 分为两种类型：「持久型 XSS」 和 「非持久型 XSS」</p>\n<p><strong>持久型 XSS</strong>「存储型」</p>\n<p>持久型 XSS 就是对客户端攻击的脚本直接植入到服务器上，从而导致每个用户访问此网站都会遭到 XSS 的攻击</p>\n<p><strong>非持久型 XSS</strong>「反射型」</p>\n<p>非持久型 XSS 是对一个页面的某个参数做文章，把精心构造好的恶意脚本包装在 URL 参数中，再讲 URL 发布到网上，骗取用户访问</p>\n<p>手段主要有</p>\n<ul>\n<li>HTML 节点内容的注入 例如 添加评论</li>\n<li>HTML 属性 例如 通过 url 传值动态修改 <code class=\"language-text\">img</code> 的 <code class=\"language-text\">src</code></li>\n<li>javascript 代码 例如 传递的变量添加双引号并在双引号后面添加要注入的脚本</li>\n</ul>\n<h3>防御 XSS</h3>\n<p>对于非持久型 XSS</p>\n<ul>\n<li>现代浏览器都对 xss 有了一定的防范作用，但也仅限于 html 节点和属性的注入。</li>\n<li>Web 页面渲染的所有内容和数据必须来自于服务器</li>\n<li>尽量不使用 <code class=\"language-text\">eval</code>, <code class=\"language-text\">new Function()</code>,<code class=\"language-text\">window.setTimeout()</code>,<code class=\"language-text\">innerHTML</code>等可执行字符串的方法</li>\n<li>前端渲染的时候要对任何字段都需要做转义</li>\n<li>对于用户输入的要添加限制，比如用户名和密码只允许字符和数字，email 必须为 email 格式</li>\n<li>对于富文本采用<strong>过滤</strong>，可以通过国人写的 <a href=\"https://github.com/leizongmin/js-xss\">xss</a></li>\n</ul>\n<p>对于持久型 XSS</p>\n<ul>\n<li>后端在入库的时候不相信任何前端的数据，将所有的字段统一进行转义处理</li>\n<li>后端在传递给前端数据的时候统一做转义处理</li>\n<li>前端不相信后端传来的数据，任何字段也都需要做转义处理</li>\n</ul>\n<p><strong>举个栗子</strong>:chestnut:</p>\n<p>先看一下后台的代码「node.js」</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/xss'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'X-XSS-Protection'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//关闭浏览器 XSS</span>\n\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hutchins &lt;script>console.log(1)&lt;/script>'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//模拟XSS攻击，后台返回了带脚本的字符串</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>前台代码</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span>\n  url<span class=\"token punctuation\">:</span> <span class=\"token string\">'http://localhost:3003/api/xss'</span><span class=\"token punctuation\">,</span>\n  dataType<span class=\"token punctuation\">:</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">success</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#uname'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token comment\">//这样在前台就会插入 script 标签</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这样便会在前台插入脚本代码并在控制台打印 <code class=\"language-text\">1</code>，那么对于此类代码就需要将其转义，让其无法运行，在 <code class=\"language-text\">success</code> 方法中改为如下代码</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//进行HTML转义后便会插入正常的内容</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> data\nstr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/&lt;/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&amp;lt'</span><span class=\"token punctuation\">)</span>\nstr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/>/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&amp;gt'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#uname'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//但其实这样也可以完美插入</span>\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#uname'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>CSRF</h2>\n<p>CSRF 「Cross-site request forgery」中文名称为跨站请求伪造</p>\n<p>攻击者盗用了你的登录信息，以你的身份模拟发送各种请求。</p>\n<p>完成 CSRF 攻击有<strong>三个条件</strong></p>\n<ul>\n<li>用户已经登录了站点 A，并且在本地保留了 cookie</li>\n<li>在用户没有登出站点的情况下<strong>也就是 cookie 还在生效的情况下</strong>访问了攻击者提供的危险站点 B</li>\n<li>站点 A 没有任何 CSRF 防御</li>\n</ul>\n<h3>CSRF 手段</h3>\n<p>拿发表评论为例，就是用户登录后编写评论点击发表这种操作，如果发表评论是 <code class=\"language-text\">get</code> 请求</p>\n<p>那 CSRF 攻击者可以通过在自制的 B 危险网站上面写一个 <code class=\"language-text\">a</code> 标签，然后由 <code class=\"language-text\">a</code> 标签模拟你点击评论发起的 <code class=\"language-text\">get</code> 请求，当你点击时，就会在 A 网站添加一个评论，这也是为什么 CSRF 叫 「one click attack 一点就爆炸」，当然也可以直接写一个图片在你不知情时发送 <code class=\"language-text\">get</code> 请求</p>\n<p>那你此刻会想，那把添加评论改成 <code class=\"language-text\">post</code> 请求应该就安全了吧</p>\n<p>改成 <code class=\"language-text\">post</code> 请求，攻击者可以在 B 网站用 js 动态生成表单，然后发送 <code class=\"language-text\">post</code> 请求，更高级点可以再生成一个隐藏的 <code class=\"language-text\">iframe</code> 让表单 <code class=\"language-text\">target</code> 指向其 <code class=\"language-text\">name</code>，让你在完全没有察觉的情况下以你的名义干一些羞羞的事情</p>\n<h3>CSRF 防御</h3>\n<p><strong>从 cookie 方面下手</strong></p>\n<ul>\n<li>禁止止第三方网站使用 cookie，使用 <code class=\"language-text\">sameSite:Strict</code> 目前仅有 chrome 支持</li>\n</ul>\n<p><strong>从绕过前端页面下手</strong></p>\n<ul>\n<li>在前端页面加入验证信息，可以使用 <a href=\"https://github.com/DoubleSpout/ccap\">ccap</a></li>\n<li>加入 token，token 在前端页面 <code class=\"language-text\">cookie</code> 和 后端必须保持一致，如果是 <code class=\"language-text\">ajax</code> 请求的话可以在前端页面 <code class=\"language-text\">meta</code> 处添加一个 <code class=\"language-text\">token</code> 属性，然后用 <code class=\"language-text\">js</code> 动态获取</li>\n</ul>\n<p><strong>referer 为 B 网站</strong></p>\n<p>验证 referer <code class=\"language-text\">/^域名/</code>，这里注意一下，如果你是用本地文件测试的话，<code class=\"language-text\">file</code> 协议是没有 referer 的</p>","frontmatter":{"title":"前端安全","date":"May 01, 2018"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/前端安全/","previous":{"fields":{"slug":"/性感慕课-在线被爬/"},"frontmatter":{"title":"性感慕课在线被爬"}},"next":{"fields":{"slug":"/prop和attr的一些理解/"},"frontmatter":{"title":"prop 和 attr 的一些理解"}}}}}