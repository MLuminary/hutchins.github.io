{"componentChunkName":"component---src-templates-post-detail-tsx","path":"/posts/post-1666483200000","result":{"data":{"site":{"siteMetadata":{"title":"Silence","author":"默尝"}},"markdownRemark":{"id":"13105021-a9d9-562e-97fb-8a4e9d40c2ac","excerpt":"它可以让你在不编写 class 组件的情况下使用 state 以及其他 React 特性 动机 在组件之间复用状态逻辑很难，render props…","html":"<blockquote>\n<p>它可以让你在不编写 class 组件的情况下使用 state 以及其他 React 特性</p>\n</blockquote>\n<h2>动机</h2>\n<ul>\n<li><strong>在组件之间复用状态逻辑很难</strong>，render props 与高阶组件的方式需要你重新调整组件的组织结构。</li>\n<li><strong>复杂组件变得难以理解</strong>，我们常常需要在 <code class=\"language-text\">componentDidMount</code> 与 <code class=\"language-text\">componentDidUpdate</code> 中获取数据，然后在 <code class=\"language-text\">componentWillUnmount</code> 中取消监听等操作，相关关联且需要对照修改的代码被进行了拆分，当逻辑变多时就会变得难以维护与理解</li>\n<li><strong>难以理解的 class</strong>，需要理解 <code class=\"language-text\">this</code> 的工作方式</li>\n</ul>\n<h2>规则</h2>\n<ul>\n<li><strong>不要在循环，条件或嵌套函数中调用 Hook。</strong>确保总是在 React 函数的顶层调用他们</li>\n<li><strong>只能在 React 函数中或者其他 Hook 中调用</strong></li>\n</ul>\n<h2>实现</h2>\n<p><strong>Hooks 在每次调用时都需要保证其顺序的一致性</strong>，因此不能出现在条件语句中。</p>\n<iframe src=\"https://codesandbox.io/embed/hooks-2fbj6w?fontsize=14&hidenavigation=1&theme=dark\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"hooks\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>","frontmatter":{"title":"React Hooks","date":"October 23, 2022"}}},"pageContext":{"slug":"/React Hooks/","previous":{"fields":{"slug":"/不可变数据/"},"frontmatter":{"title":"Immutability in React","date":"2022-10-25"}},"next":{"fields":{"slug":"/React 合成事件/"},"frontmatter":{"title":"React 合成事件","date":"2022-10-16"}},"prePath":"/posts/post-1666656000000","nextPath":"/posts/post-1665878400000"}},"staticQueryHashes":["1747850863","63159454"]}