{"componentChunkName":"component---src-templates-post-detail-tsx","path":"/posts/post-1666656000000","result":{"data":{"site":{"siteMetadata":{"title":"Silence","author":"默尝"}},"markdownRemark":{"id":"4375c22a-c096-5a60-ba93-7f0a7aa8d14f","excerpt":"就像它描述的这样，不可变「immutability」就意味着数据本身是不可以被修改的 目的 在 React 中为什么要使用不可变数据呢？ React 中组件的更新是依赖状态有无更新的。不可变数据会让 React…","html":"<p>就像它描述的这样，不可变「immutability」就意味着<strong>数据本身是不可以被修改的</strong></p>\n<h2>目的</h2>\n<p>在 React 中为什么要使用不可变数据呢？</p>\n<ul>\n<li><strong>React 中组件的更新是依赖状态有无更新的</strong>。不可变数据会让 React 状态值在每次更新时都返回一个全新的值，这样对于引用数据类型的更新判断就变的非常容易</li>\n<li><strong>不可变数据也会让数据更容易预测与维护</strong>，避免数据在某处不小心被修改而导致 bug</li>\n</ul>\n<h2>问题</h2>\n<p>不可变性提供了很多便利，<strong>但是在更新复杂值时会变的非常麻烦</strong>，例如</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  phone<span class=\"token operator\">:</span> <span class=\"token string\">'1-770-736-8031 x56442'</span><span class=\"token punctuation\">,</span>\n  website<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> site<span class=\"token operator\">:</span> <span class=\"token string\">'hildegard.org'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  company<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Romaguera-Crona'</span><span class=\"token punctuation\">,</span>\n    catchPhrase<span class=\"token operator\">:</span> <span class=\"token string\">'Multi-layered client-server neural-net'</span><span class=\"token punctuation\">,</span>\n    bs<span class=\"token operator\">:</span> <span class=\"token string\">'harness real-time e-markets'</span><span class=\"token punctuation\">,</span>\n    money<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'RMB'</span>\n      total<span class=\"token operator\">:</span> <span class=\"token number\">1111111</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 如果要更新 total</span>\n<span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>initialState<span class=\"token punctuation\">,</span>\n  company<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>initialState<span class=\"token punctuation\">.</span>company<span class=\"token punctuation\">,</span>\n    money<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>initialState<span class=\"token punctuation\">.</span>company<span class=\"token punctuation\">.</span>money<span class=\"token punctuation\">,</span>\n      total<span class=\"token operator\">:</span> <span class=\"token number\">2222222</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>从上面可以看到，我们为了生成新数据写法非常麻烦，为了清晰我们可以每次深拷贝对象，然后再修改对应的值。这样代码是清晰了，但是也会<strong>增加无用的拷贝，而且对于引用类数据类型还会生成一个全新的引用类型数据，从而导致其他组件的更新</strong></p>\n<h2>解决方案</h2>\n<p>如果使用 immer，我们写起来是这样的</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prevState<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">produce</span><span class=\"token punctuation\">(</span>prevState<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>draft<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  \tdraft<span class=\"token punctuation\">.</span>company<span class=\"token punctuation\">.</span>money<span class=\"token punctuation\">.</span>total <span class=\"token operator\">=</span> <span class=\"token number\">2222222</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>非常的简单与清晰，而且 immer 在内部做了很好的性能优化。那 immer 是如何实现的呢？</p>\n<h2>实现</h2>\n<p>immer.js 的动机就是要让 js 对于复杂对象的修改变得更加容易、高效。</p>\n<iframe src=\"https://codesandbox.io/embed/immer-3hh1ex?fontsize=14&hidenavigation=1&theme=dark\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"immer\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>","frontmatter":{"title":"Immutability in React","date":"October 25, 2022"}}},"pageContext":{"slug":"/不可变数据/","previous":null,"next":{"fields":{"slug":"/React Hooks/"},"frontmatter":{"title":"React Hooks","date":"2022-10-23"}},"nextPath":"/posts/post-1666483200000"}},"staticQueryHashes":["1747850863","63159454"]}