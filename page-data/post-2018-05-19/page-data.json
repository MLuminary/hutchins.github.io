{"componentChunkName":"component---src-templates-post-detail-tsx","path":"/post-2018-05-19","webpackCompilationHash":"a7ebe64dfd457111674d","result":{"data":{"site":{"siteMetadata":{"title":"Silence","author":"默尝"}},"markdownRemark":{"id":"773f049b-b2b0-5230-8c24-dcc900df2ea2","excerpt":"跨域问题是日常中必须要面对的，每次面试必考跨域也体现了跨域技术的重要性，跨域的文章也多的数不过来，今天这篇文章主要是用来总结自己每种跨域技术的尝试，如果有幸能帮到别人那就再好不过了 前期准备 自己用 node 搭了两个服务器，前台设置的端口为 3002，模拟的服务端设置的端口为 300…","html":"<blockquote>\n<p>跨域问题是日常中必须要面对的，每次面试必考跨域也体现了跨域技术的重要性，跨域的文章也多的数不过来，今天这篇文章主要是用来总结自己每种跨域技术的尝试，如果有幸能帮到别人那就再好不过了</p>\n</blockquote>\n<h2>前期准备</h2>\n<p>自己用 node 搭了两个服务器，前台设置的端口为 3002，模拟的服务端设置的端口为 3001</p>\n<p>跨域问题的出现是由于「同源策略」引起的，「同源」就指的是三个相同，即「协议相同」、「域名相同」、「端口相同」</p>\n<p>「同源策略」使得以下三种行为受到限制</p>\n<ul>\n<li>Cookie、LocalStorage 和 IndexDB 无法获取</li>\n<li>DOM 无法获取</li>\n<li>Ajax 请求无法发送</li>\n</ul>\n<p>具体情况还请移步 <a href=\"http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html\">浏览器同源政策及其规避方法</a></p>\n<p>自己在这还是稍微总(jie)结(jian)一下，写一遍加深一下印象</p>\n<h2>对于 Cookie 和 iframe</h2>\n<p>对于 Cookie 和 iframe ，如果两个网页一级域名相同，只是二级域名不同，比如 <code class=\"language-text\">a.hutchins.com</code> 和 <code class=\"language-text\">b.hutchins.com</code> ，浏览器可通过设置相同的 <code class=\"language-text\">document.domain</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span>domain <span class=\"token operator\">=</span> <span class=\"token string\">'hutchins.com'</span></code></pre></div>\n<p>服务器也可以在设置 Cookie 的时候，指定 Cookie 的所属域名为一级域名，比如</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Set<span class=\"token operator\">-</span>Cookie<span class=\"token punctuation\">:</span> key<span class=\"token operator\">=</span>value<span class=\"token punctuation\">;</span> domain<span class=\"token operator\">=</span>hutchins<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">;</span> path<span class=\"token operator\">=</span><span class=\"token operator\">/</span></code></pre></div>\n<p>这样的话二级域名和三级域名不做任何设置就可以读取这个 Cookie</p>\n<h2>window.postMessage</h2>\n<p>H5 引入了全新的 API :「跨文档通信 API」</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">otherWindow<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> tragetOrigin<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">otherWindow</code> 窗口</li>\n<li><code class=\"language-text\">message</code> 要发送的信息</li>\n<li><code class=\"language-text\">targetOrigin</code> 指定哪些窗口可以接受到信息，<code class=\"language-text\">*</code> 表示无限制</li>\n</ul>\n<p>接收窗口通过 <code class=\"language-text\">message</code> 方法接收</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">message</code> 的事件对象有以下三个属性</p>\n<ul>\n<li>event.source 发送消息的窗口</li>\n<li>event.origin 消息发向的网址</li>\n<li>event.data 发送的消息</li>\n</ul>\n<h2>AJAX 跨域</h2>\n<h3>jsonp 跨域</h3>\n<p>jsonp 的原理就是动态创建 <code class=\"language-text\">script</code> 标签，然后用 <code class=\"language-text\">script</code> 的 <code class=\"language-text\">src</code> 属性引用外部跨域链接，通过<strong>回调函数参数</strong>接受后台传递的信息</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span>\nscript<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'text/javascript'</span>\n\n<span class=\"token comment\">//传参并指定回调函数执行函数为onBack</span>\nscript<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:3001/api/jsonp?uname=hutchins&amp;callback=onBack'</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//回调执行函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">onBack</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>前台利用 jquery ajax 发送请求</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  url<span class=\"token punctuation\">:</span> <span class=\"token string\">'http://localhost:3001/api/jsonp?uname=hutchins'</span><span class=\"token punctuation\">,</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span>\n  dataType<span class=\"token punctuation\">:</span> <span class=\"token string\">'jsonp'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 请求方式为jsonp</span>\n  jsonpCallback<span class=\"token punctuation\">:</span> <span class=\"token string\">'onBack'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 自定义回调函数名</span>\n  data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">success</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>node 后台处理前端请求的函数</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//jsonp</span>\n  <span class=\"token function-variable function\">jsonpf</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> params <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query\n    <span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>callback\n\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'text/javascript'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fn <span class=\"token operator\">+</span> <span class=\"token string\">'('</span> <span class=\"token operator\">+</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但是 jsonp 只能支持 Get 请求</p>\n<h3>跨域资源共享 「CORS」</h3>\n<p>请求分为「简单请求」和「非简单请求」，而处理这两种请求的方式很不同，这里只说一下「简单请求」</p>\n<p>请求方式为以下几种</p>\n<ul>\n<li>HEAD</li>\n<li>GET</li>\n<li>POST</li>\n</ul>\n<p>HTTP 的消息头不超出以下几种字段</p>\n<ul>\n<li>Accept</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n<li>Last-Event-ID</li>\n<li>Content-Type 只限于 application/x-www-form-ulrencoded、multipart/form-data、text/plain</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 原生js</span>\n<span class=\"token keyword\">var</span> xhr\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>XMLHttpRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XDomainRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//兼容 IE8/9</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//前端设置 cookie</span>\nxhr<span class=\"token punctuation\">.</span>withCredentials <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://localhost:3001/api/cors'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/x-www-form-urlencoded'</span><span class=\"token punctuation\">)</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'uname=hutchins'</span><span class=\"token punctuation\">)</span>\n\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>跨域后台设置</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'Access-Control-Allow-Credentials'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'true'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//后端允许发送 cookie</span>\n  <span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'http://localhost:3002'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 'Set-Cookie': 'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'  // HttpOnly的作用是让js无法读取cookie</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nres<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>postData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nres<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"跨域问题总结","date":"May 19, 2018"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/跨域问题总结/","previous":{"fields":{"slug":"/FlexDisplayRoom/"},"frontmatter":{"title":"FlexDisplayRoom","date":"2018-05-20"}},"next":{"fields":{"slug":"/今天这个仇先记下来/"},"frontmatter":{"title":"今天这个仇先记下来","date":"2018-05-18"}}}}}