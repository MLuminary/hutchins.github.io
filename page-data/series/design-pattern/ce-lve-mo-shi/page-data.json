{"componentChunkName":"component---src-templates-series-post-tsx","path":"/series/design-pattern/ce-lve-mo-shi/","webpackCompilationHash":"4308bcdfba71a17e955e","result":{"data":{"site":{"siteMetadata":{"title":"Silence","author":"默尝"}},"markdownRemark":{"id":"831960c2-7161-5b68-80d0-24c0fa2f2ce2","excerpt":"策略模式「Strategy Pattern…","html":"<blockquote>\n<p>策略模式「Strategy Pattern」：定义一系列的算法，把它们一个个的封装起来，并且使它们可以互相替换</p>\n</blockquote>\n<h2>模式动机</h2>\n<p>在软件系统中，有许多算法可以实现某一功能，如查找、排序功能。一种常用的方法是使用硬编码，在一个类中，如果需要提供多种查找算法，可以将这些算法写到一个类中，在该类中提供多个方法，每一个方法对应一个具体的查找算法；也可以将这些查找算法封装在一个统一的方法中，通过 if..else 来进行选择。但是如果想要新增一种方法，就必须要<strong>改动这个类或者改动这个方法。随着算法数量的增加，该类也会变得比较复杂难以维护。</strong></p>\n<h2>场景描述</h2>\n<p>很多公司的年终奖是根据员工的工资基数和年底绩效情况来发放的。例如，绩效为 S 的人年 终奖有 4 倍工资，绩效为 A 的人年终奖有 3 倍工资，而绩效为 B 的人年终奖是 2 倍工资。假设财务部要求我们提供一段代码，来方便他们计算员工的年终奖</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">calculateBonus</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">performanceLevel<span class=\"token punctuation\">,</span> salary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>performanceLevel <span class=\"token operator\">===</span> <span class=\"token string\">'S'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> salary <span class=\"token operator\">*</span> <span class=\"token number\">4</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>performanceLevel <span class=\"token operator\">===</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> salary <span class=\"token operator\">*</span> <span class=\"token number\">3</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>performanceLevel <span class=\"token operator\">===</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> salary <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">calculateBonus</span><span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>以上的方式很好的满足了此次的需求，但是缺点也是显而易见的</p>\n<p>假如再增加一种绩效，是需要改动 <code class=\"language-text\">calculateBonus</code> 里的代码的；此函数也会越来越庞大，之后会难于维护；其中的计算逻辑也难以复用</p>\n<h2>使用策略模式优化</h2>\n<p>将不变的部分和变化的部分隔开是每个设计模式的主题，策略模式也不例外，<strong>策略模式的目的就是将算法的使用与算法的实现相分离</strong></p>\n<p>我们先来模仿传统面向对象语言中的实现，首先是相应算法的实现</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">performanceS</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nperformanceS<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">calculate</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">salary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> salary <span class=\"token operator\">*</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">performanceA</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nperformanceA<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">calculate</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">salary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> salary <span class=\"token operator\">*</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">performanceB</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nperformanceB<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">calculate</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">salary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> salary <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>定义接口类，开始使用算法得的想要的数据</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Bonus</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>salary <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>strategy <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 原始工资</span>\n<span class=\"token comment\">// 绩效等级对应的策略对象</span>\n<span class=\"token class-name\">Bonus</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setSalary</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">salary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>salary <span class=\"token operator\">=</span> salary <span class=\"token comment\">// 设置员工的原始工资</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Bonus</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setStrategy</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">strategy</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>strategy <span class=\"token operator\">=</span> strategy <span class=\"token comment\">// 设置员工绩效等级对应的策略对象</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Bonus</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getBonus</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 取得奖金数额</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>strategy<span class=\"token punctuation\">.</span><span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>salary<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 把计算奖金的操作委托给对应的策略对象</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如此这般，我们增加一个种绩效方式时，只需要再写一个新的类来实现就好了，而不需要改动任何现存的代码，下面是 <code class=\"language-text\">Bonus</code> 的使用</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> bonus <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bonus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nbonus<span class=\"token punctuation\">.</span><span class=\"token function\">setSalary</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\nbonus<span class=\"token punctuation\">.</span><span class=\"token function\">setStrategy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">performanceS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置策略对象</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bonus<span class=\"token punctuation\">.</span><span class=\"token function\">getBonus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出:40000</span>\nbonus<span class=\"token punctuation\">.</span><span class=\"token function\">setStrategy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">performanceA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置策略对象</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bonus<span class=\"token punctuation\">.</span><span class=\"token function\">getBonus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出:30000</span></code></pre></div>\n<h2>JavaScript 版本的策略模式</h2>\n<p>传统面向对象语言中，策略对象需要策略类来生成再在原型上添加策略「方法」，但在 JavaScript 中，函数也是对象。所以各个算法的实现可以直接定义为函数对象。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> strategies <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">S</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">salary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> salary <span class=\"token operator\">*</span> <span class=\"token number\">4</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">A</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">salary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> salary <span class=\"token operator\">*</span> <span class=\"token number\">3</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">B</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">salary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> salary <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>那接口类也会因此变得不同，我们可以用更简单的方法去接受用户的请求。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">calculateBonus</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">level<span class=\"token punctuation\">,</span> salary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> strategies<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">calculateBonus</span><span class=\"token punctuation\">(</span><span class=\"token string\">'S'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出:80000</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">calculateBonus</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出:30000</span></code></pre></div>\n<p>但其实如果把策略模式仅仅用来封装算法，未免有点大材小用，在实际开发中，我们通常会把算法的含义扩散开来，使策略模式也可以用来封装 一系列的「业务规则」。<strong>只要这些业务规则指向的目标一致，并且可以被替换使用，我们就可以用策略模式来封装它们</strong>。</p>\n<h2>小结</h2>\n<p>策略模式利用组合、委托和多态等技术和思想，可以有效地<strong>避免多重条件选择语句</strong>。</p>\n<p>策略模式提供了对开放—封闭原则的完美支持，将算法封装在独立的策略对象中，使得它们易于切换，易于理解，易于扩展。</p>\n<p>策略模式中的算法也可以复用在系统的其他地方，从而避免许多重复的复制粘贴工作。</p>\n<p>在策略模式中利用组合和委托来让接受用户请求类拥有执行算法的能力，这也是继承的一种更轻便的替代方案。</p>\n<p>缺点虽然有，但并不严重，首先，使用策略模式会在程序中增加许多策略类或者策略对象，但是在函数作为一等对象的 JavaScript 中，策略对象的 <code class=\"language-text\">key</code> 就是值为函数的变量，策略对象对于 JavaScript 来说就是隐形的。</p>","frontmatter":{"title":"策略模式","date":"July 27, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/design-pattern/ce-lve-mo-shi/","previous":{"fileAbsolutePath":"/Users/zhanghaoqin/gitMaster/Silence/content/series/design-pattern/gong-chang-mo-shi.md","fields":{"slug":"/design-pattern/gong-chang-mo-shi/"},"frontmatter":{"title":"工厂模式","date":"2019-07-26"}},"next":{"fileAbsolutePath":"/Users/zhanghaoqin/gitMaster/Silence/content/series/design-pattern/dai-li-mo-shi.md","fields":{"slug":"/design-pattern/dai-li-mo-shi/"},"frontmatter":{"title":"代理模式","date":"2019-07-28"}}}}}