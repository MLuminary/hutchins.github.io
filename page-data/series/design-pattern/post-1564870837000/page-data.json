{"componentChunkName":"component---src-templates-post-detail-tsx","path":"/series/design-pattern/post-1564870837000","result":{"data":{"site":{"siteMetadata":{"title":"Silence","author":"默尝"}},"markdownRemark":{"id":"a785fda7-1876-5900-9255-1e597125dc51","excerpt":"责任链模式「Chain of Responsibility Pattern…","html":"<blockquote>\n<p>责任链模式「Chain of Responsibility Pattern」为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</p>\n</blockquote>\n<h2>模式动机</h2>\n<p>避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条<strong>链</strong>，并且沿着这条<strong>链</strong>传递请求，直到有对象处理它为止。客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。</p>\n<h2>实现</h2>\n<p>一款产品的上线一般要经历调研、设计、开发、测试后才能上线，我们先来将这四个过程实现，当每一个阶段完成后，我们返回一个 <code class=\"language-text\">&#39;next&#39;</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Research</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 需求尚未明确</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 调研需求</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 暂且用 next 代表下一步的意思</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'next'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Design</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 如果没有设计完成</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 设计产品</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'next'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Coding</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 如果没有编码完成</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 继续开发</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'next'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Test</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 如果没有测试完成</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 继续测试</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'next'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后我们再实现一个 <code class=\"language-text\">after</code> 函数，这样我们就可以链式调用之前的四个过程</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">after</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 拿到调用 after 的返回结果</span>\n    <span class=\"token keyword\">const</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">===</span> <span class=\"token string\">'next'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> ret\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n​\n<span class=\"token keyword\">var</span> order <span class=\"token operator\">=</span> Research<span class=\"token punctuation\">.</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span>Design<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span>Coding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span>Test<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>小结</h2>\n<p>用 AOP 来实现职责链既简单又巧妙，可以改变链内的成员或者调动它们的次序，并且允许动态地新增或者删除责任，而且增加新的请求处理类很方便。但是过长的职责链使性能会受到一定的影响，也会增加一些调试的困难。</p>","frontmatter":{"title":"职责链模式","date":"August 03, 2019"}}},"pageContext":{"slug":"/design-pattern/zhi-ze-lian-mo-shi/","previous":{"fileAbsolutePath":"/Users/test/gitMaster/Silence/content/series/design-pattern/xiang-yuan-mo-shi.md","frontmatter":{"date":"2019-08-02T22:20:37.000Z","title":"享元模式"},"fields":{"slug":"/design-pattern/xiang-yuan-mo-shi/"}},"next":{"fileAbsolutePath":"/Users/test/gitMaster/Silence/content/series/design-pattern/zhong-jie-zhe-mo-shi.md","frontmatter":{"date":"2019-08-04T22:20:37.000Z","title":"中介者模式"},"fields":{"slug":"/design-pattern/zhong-jie-zhe-mo-shi/"}},"prePath":"/series/design-pattern/post-1564784437000","nextPath":"/series/design-pattern/post-1564957237000"}},"staticQueryHashes":["1747850863","63159454"]}