{"componentChunkName":"component---src-templates-post-detail-tsx","path":"/series/design-pattern/post-1565389237000","result":{"data":{"site":{"siteMetadata":{"title":"Silence","author":"默尝"}},"markdownRemark":{"id":"89b8ffd7-b665-5509-aa8a-3ab30dcb3102","excerpt":"最少知识原则 LKP「Least Knowledge Principle…","html":"<blockquote>\n<p>最少知识原则 LKP「Least Knowledge Principle」说的是一个软件实体应当尽可能少地与其他实体发生相互作用。这里的软件实体是一个广义的概念，不仅包括对象，还包括系统、类、模块、函数、变量等。</p>\n</blockquote>\n<h2>减少对象之间的联系</h2>\n<p>单一职责原则指导我们把对象划分成较小的粒度，这可以提高对象的可复用性。但越来越多的对象之间可能会产生错综复杂的联系，如果修改了其中一个对象，很可能会影响到跟它相互引用的其他对象。<strong>对象和对象耦合在一起，有可能会降低它们的可复用性</strong>。</p>\n<p>最少知识原则要求我们在设计程序时，应当尽量减少对象之间<strong>不必彼此直接通信</strong>，那么这两个对象就<strong>不要发生直接的相互联系</strong>。 常见的做法是引入一个<strong>第三者对象</strong>，来承担这些对象之间的通信作用。如果一些对象需要向另一些对象发起请求，可以通过第三者来转发这些请求。例如引入「中介者」。</p>\n<h2>小结</h2>\n<p>现实生活中，全自动洗衣机的按键就属于最少知识原则的一种，加水、洗衣、漂洗、脱水全部是独立的系统，由第三者对象外部按键串联了起来。但是虽然遵守最小只是原则减少了对象之间的依赖，但也可能增加一些庞大到难以维护的第三者对象，就比如微波炉的无数个按键。因此在实际开发中，是否选择让代码符合最小知识原则，要根据具体的环境来定</p>","frontmatter":{"title":"最少知识原则","date":"August 09, 2019"}}},"pageContext":{"slug":"/design-pattern/zui-shao-zhi-shi-yuan-ze/","previous":{"fileAbsolutePath":"/Users/test/gitMaster/Silence/content/series/design-pattern/dan-yi-zhi-ze-yuan-ze.md","frontmatter":{"date":"2019-08-08T22:20:37.000Z","title":"单一职责原则"},"fields":{"slug":"/design-pattern/dan-yi-zhi-ze-yuan-ze/"}},"next":{"fileAbsolutePath":"/Users/test/gitMaster/Silence/content/series/design-pattern/kai-fang-feng-bi-yuan-ze.md","frontmatter":{"date":"2019-08-10T22:20:37.000Z","title":"开放封闭原则"},"fields":{"slug":"/design-pattern/kai-fang-feng-bi-yuan-ze/"}},"prePath":"/series/design-pattern/post-1565302837000","nextPath":"/series/design-pattern/post-1565475637000"}},"staticQueryHashes":["1747850863","63159454"]}