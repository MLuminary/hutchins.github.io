{"componentChunkName":"component---src-templates-post-detail-tsx","path":"/series/design-pattern/post-1564438837000","result":{"data":{"site":{"siteMetadata":{"title":"Silence","author":"默尝"}},"markdownRemark":{"id":"1d71d30d-2e84-5f8e-926a-3c379dadd67d","excerpt":"迭代器模式「Iterator Pattern…","html":"<blockquote>\n<p>迭代器模式「Iterator Pattern」：是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。迭代器模式可以把迭代的过程从业务逻辑中分离出来，在使用迭代器模式之后，即使不关心对象的内部构造，也可以按顺序访问其中的每个元素</p>\n</blockquote>\n<h2>模式动机</h2>\n<p>一个聚合对象，如一个列表或者一个集合，<strong>应该提供一种方法来让别人可以访问它的元素，而又不需要暴露它的内部结构</strong>。 针对不同的需要，可能还要以不同的方式遍历整个聚合对象，但是我们并不希望在聚合对象的抽象层接口中充斥着各种不同遍历的操作。</p>\n<p><strong>怎样遍历一个聚合对象，又不需要了解聚合对象的内部结构，还能够提供多种不同的遍历方式，这就是迭代器模式所要解决的问题</strong></p>\n<h2>实现</h2>\n<h3>内部迭代器</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">each</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arg<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/*打印结果\n  0 1\n  1 2\n  2 3*/</span></code></pre></div>\n<h3>外部迭代器</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Iterator</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">next</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    currentIndex<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">done</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> currentIndex <span class=\"token operator\">>=</span> obj<span class=\"token punctuation\">.</span>length\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getCurrentItem</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">[</span>currentIndex<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    next<span class=\"token punctuation\">,</span>\n    done<span class=\"token punctuation\">,</span>\n    getCurrentItem<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>内部迭代器已经在内部定义好了迭代规则，只需要一次调用即可。外部迭代器的虽然增加一点调用的复杂度，但是我们可以手工控制迭代的过程和顺序。</p>\n<h2>小结</h2>\n<p>迭代器模式是一种相对简单的模式，简单到很多时候我们都不认为它是一种设计模式。目前的绝大部分语言都内置了迭代器</p>","frontmatter":{"title":"迭代器模式","date":"July 29, 2019"}}},"pageContext":{"slug":"/design-pattern/die-dai-qi-mo-shi/","previous":{"fileAbsolutePath":"/Users/test/gitMaster/Silence/content/series/design-pattern/dai-li-mo-shi.md","frontmatter":{"date":"2019-07-28T22:20:37.000Z","title":"代理模式"},"fields":{"slug":"/design-pattern/dai-li-mo-shi/"}},"next":{"fileAbsolutePath":"/Users/test/gitMaster/Silence/content/series/design-pattern/ding-yue-fa-bu-mo-shi.md","frontmatter":{"date":"2019-07-30T22:20:37.000Z","title":"订阅-发布模式"},"fields":{"slug":"/design-pattern/ding-yue-fa-bu-mo-shi/"}},"prePath":"/series/design-pattern/post-1564352437000","nextPath":"/series/design-pattern/post-1564525237000"}},"staticQueryHashes":["1747850863","63159454"]}