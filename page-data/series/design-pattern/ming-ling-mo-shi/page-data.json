{"componentChunkName":"component---src-templates-series-post-tsx","path":"/series/design-pattern/ming-ling-mo-shi/","webpackCompilationHash":"ac4f7e88a3f0fb43b9e3","result":{"data":{"site":{"siteMetadata":{"title":"Silence","author":"默尝"}},"markdownRemark":{"id":"4fc84148-3384-5f75-b61c-17b57dbb8c4d","excerpt":"命令模式「Command Pattern…","html":"<blockquote>\n<p>命令模式「Command Pattern」：是一种数据驱动的设计模式，它属于行为型模式。 请求以命令的形式包裹在对象中，并传给调用对象。 调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。</p>\n</blockquote>\n<h2>模式动机</h2>\n<p>命令模式中的命令指的是一个执行某些特定事情的指令，命令模式常见的场景是: 有时候需要向某些对象发送请求，但是并不知道请求的接受者是谁，也不知道请求的操作是什么。此时希望一种松耦合的方式来设计程序，使得请求发送者和请求接受者能消除彼此之间的耦合关系。</p>\n<h2>实现</h2>\n<p>我们拿电视遥控器与电视来举例，电视是请求的接受者，遥控器是请求的发送者，遥控器上有一些按钮，不同的按钮对应电视机的不同操作。在这个例子中，每个按钮实际上就是每个命令。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">TV</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 将命令抽象出来</span>\n<span class=\"token keyword\">const</span> Command <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">turnOff</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'关闭电视'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">turnOn</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'打开电视'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">volumeIncrease</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'音量增加'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n​\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bindCommand</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> command</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">command</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n​\n<span class=\"token keyword\">const</span> CemoteControl <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  key1<span class=\"token punctuation\">:</span> <span class=\"token function\">bindCommand</span><span class=\"token punctuation\">(</span>Command<span class=\"token punctuation\">.</span>turnOff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  key2<span class=\"token punctuation\">:</span> <span class=\"token function\">bindCommand</span><span class=\"token punctuation\">(</span>Command<span class=\"token punctuation\">.</span>trunOn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  key3<span class=\"token punctuation\">:</span> <span class=\"token function\">bindCommand</span><span class=\"token punctuation\">(</span>Command<span class=\"token punctuation\">.</span>volumeIncrease<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>小结</h2>\n<p>命令模式的本质是对命令进行封装，将发出命令的责任和执行命令的责任分割开</p>\n<p>每个命令都是一个操作：请求的一方发出请求，要求执行一个操作；接受的一方收到请求，并执行操作，命令模式使请求本身成为一个「对象」，这个对象和其他对象一样可以被存储和传递</p>\n<p>但是 JavaScript 作为将函数作为一等对象的语言，命令模式也早已融入到了 JavaScript 语言中。因此实现起来自己感觉略显鸡肋，并没有感觉很实用….</p>","frontmatter":{"title":"命令模式","date":"July 31, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/design-pattern/ming-ling-mo-shi/","previous":{"fileAbsolutePath":"/Users/zhanghaoqin/gitMaster/Silence/content/series/design-pattern/ding-yue-fa-bu-mo-shi.md","fields":{"slug":"/design-pattern/ding-yue-fa-bu-mo-shi/"},"frontmatter":{"title":"订阅-发布模式","date":"2019-07-30"}},"next":{"fileAbsolutePath":"/Users/zhanghaoqin/gitMaster/Silence/content/series/design-pattern/zu-he-mo-shi.md","fields":{"slug":"/design-pattern/zu-he-mo-shi/"},"frontmatter":{"title":"组合模式","date":"2019-07-31"}}}}}