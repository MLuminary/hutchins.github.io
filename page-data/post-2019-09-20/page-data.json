{"componentChunkName":"component---src-templates-post-detail-tsx","path":"/post-2019-09-20","webpackCompilationHash":"59fb768b9ded4d692214","result":{"data":{"site":{"siteMetadata":{"title":"Silence","author":"默尝"}},"markdownRemark":{"id":"7f48cca7-d518-5f65-a827-97728089ecb9","excerpt":"记录使用 hooks 实现 mention 组件的历程 💻 State Props MeasureList 何时出现 MeasureList…","html":"<blockquote>\n<p>记录使用 hooks 实现 mention 组件的历程 💻</p>\n</blockquote>\n<h2>State</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">measuring <span class=\"token comment\">// 测量</span>\nmeasureLocation <span class=\"token comment\">// 需要定位的位置</span>\nmeasureText <span class=\"token comment\">// 用于搜索的本文</span>\nmeasurePrefix <span class=\"token comment\">// 呼出 List 的符号 例如 '@'</span>\nisESC <span class=\"token comment\">// 使用 ESC 关闭</span>\nactiveIndex <span class=\"token comment\">// 用于键盘事件中上下移动搜索的列表</span></code></pre></div>\n<h2>Props</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">setValue</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n  value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n  trigger<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token comment\">// '@'</span>\n  <span class=\"token function-variable function\">onSearch</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">text<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span> <span class=\"token comment\">// 传递 MeasureText</span>\n  textareaRef<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>RefObject<span class=\"token operator\">&lt;</span>HTMLTextAreaElement<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n  style<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>CSSProperties\n  className<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n  onSelect<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">params<span class=\"token punctuation\">:</span> ItemType</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n  MenuClassName<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n  mountIn<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> HTMLElement\n  loading<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">&amp;</span> Omit<span class=\"token operator\">&lt;</span>HTMLTextareaProps<span class=\"token punctuation\">,</span> <span class=\"token string\">'onSelect'</span><span class=\"token operator\">></span></code></pre></div>\n<h2>MeasureList 何时出现</h2>\n<blockquote>\n<p><strong>MeasureList 在这仅代表呼出的搜索结果列表</strong>，很多人可能首先想到的是应该要确定 <code class=\"language-text\">measureList</code> 出现的位置，但其实我们只需要在 <code class=\"language-text\">measureList</code> 要出现的时候再计算其位置就可以，所以首先必须要确定 <code class=\"language-text\">measureList</code> 何时出现</p>\n</blockquote>\n<p><strong>规则：</strong></p>\n<ul>\n<li>当光标左侧有 <code class=\"language-text\">measurePrefix</code> 存在并且之间没有空格时, 也就是 <code class=\"language-text\">measureText</code> 不含有空格</li>\n<li><code class=\"language-text\">isESC</code> 为 <code class=\"language-text\">false</code> 时「下文详细解释」</li>\n</ul>\n<h3>获取 MeasureText</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 获取光标左侧的文本</span>\ntextareaValue<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> textAreaRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>selectionStart<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 获取距离光标最近的 MeasurePrefix 的位置, 也就是需要定位的位置</span>\n<span class=\"token keyword\">const</span> lastMeasurePrefixLocation <span class=\"token operator\">=</span> selectionStartText<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span>measurePrefix<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 如果 lastMeasurePrefixLocation 不等于 -1 的情况下</span>\n<span class=\"token comment\">// 此时 mesurePrefix 位置与光标位置之间的文本即为 measurePrefix</span>\n<span class=\"token keyword\">const</span> measureText <span class=\"token operator\">=</span> selectionStartText<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>\n  lastMeasurePrefixLocation <span class=\"token operator\">+</span> measurePrefix<span class=\"token punctuation\">.</span>length\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>当满足以上规则时 measuring 为 true</strong></p>\n<h2>MeasurePrefix 的定位</h2>\n<blockquote>\n<p>当 <code class=\"language-text\">measureList</code> 出现时，需要用 <code class=\"language-text\">measurePrefix</code> 此时的位置来对 <code class=\"language-text\">measureList</code> 进行定位</p>\n</blockquote>\n<p>在 <code class=\"language-text\">textarea</code> 中做定位相对困难，因此我们采用 <code class=\"language-text\">div</code> 来模拟 <code class=\"language-text\">textarea</code> 中的文本情况去实现 <code class=\"language-text\">measurePrefix</code> 的定位</p>\n<p><strong>首先需要将 textarea 中影响文本样式的 style 应用到 div 中去</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>textAreaRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> textareaCssProperties <span class=\"token operator\">=</span> <span class=\"token function\">getComputedStyle</span><span class=\"token punctuation\">(</span>textAreaRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      lineHeight<span class=\"token punctuation\">:</span> textareaCssProperties<span class=\"token punctuation\">.</span>lineHeight<span class=\"token operator\">!</span><span class=\"token punctuation\">,</span>\n      fontSize<span class=\"token punctuation\">:</span> textareaCssProperties<span class=\"token punctuation\">.</span>fontSize<span class=\"token operator\">!</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">setTextAreaStyle</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>textAreaRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">&amp;&amp;</span> textAreaRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>模拟的 <code class=\"language-text\">div</code> 如下</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> measureContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\t&lt;div style={textAreaStyle} className=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">classnames</span><span class=\"token punctuation\">(</span>\n    props<span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">,</span>\n    Styles<span class=\"token punctuation\">[</span><span class=\"token string\">'measure-content'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">>\n\t\t&lt;span dangerouslySetInnerHTML={{ __html: escape(value.slice(0, measureLocation)) }} />\n\t\t&lt;span ref={measurePrefixRef}>@&lt;/span>\n\t\t&lt;span dangerouslySetInnerHTML={{ __html: escape(value.slice( measureLocation)) }} />\n  &lt;/div></span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token comment\">// escape 函数主要是用来处理回车造成的文本换行，如果不转换成 &lt;br> 的话，在 div 中文本会显示成一行,定位就会有错误。</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">escape</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/&lt;|>|`|\"|&amp;/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\r\\n|\\r|\\n/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;br>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>模拟 <code class=\"language-text\">div</code> 的样式需要额外添加一些属性来使 <code class=\"language-text\">div</code> 完全模拟 <code class=\"language-text\">textarea</code> 的行为，当然 <code class=\"language-text\">text-area-autosize</code> 的行为也支持</p>\n<div class=\"gatsby-highlight\" data-language=\"stylus\"><pre class=\"language-stylus\"><code class=\"language-stylus\"><span class=\"token selector\">.measure-content</span>\n  <span class=\"token property-declaration\"><span class=\"token property\">position</span> absolute</span>\n  <span class=\"token property-declaration\"><span class=\"token property\">top</span> <span class=\"token number\">0</span></span>\n  <span class=\"token property-declaration\"><span class=\"token property\">right</span> <span class=\"token number\">0</span></span>\n  <span class=\"token property-declaration\"><span class=\"token property\">bottom</span> <span class=\"token number\">0</span></span>\n  <span class=\"token property-declaration\"><span class=\"token property\">left</span> <span class=\"token number\">0</span></span>\n  <span class=\"token property-declaration\"><span class=\"token property\">z-index</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></span>\n  <span class=\"token property-declaration\"><span class=\"token property\">overflow</span> scroll</span>\n  <span class=\"token property-declaration\"><span class=\"token property\">white-space</span> pre-wrap</span>\n  <span class=\"token property-declaration\"><span class=\"token property\">word-break</span> break-all</span>\n  <span class=\"token property-declaration\"><span class=\"token property\">opacity</span> <span class=\"token number\">0</span></span></code></pre></div>\n<p>注意其共同的父 <code class=\"language-text\">div</code> 需要添加 <code class=\"language-text\">position: relative</code></p>\n<h2>MeasureList 何时隐藏</h2>\n<ul>\n<li>当 <code class=\"language-text\">measureText</code> 中包含空格时</li>\n<li>当选中 <code class=\"language-text\">MeasureList</code> 中的某一个 item 时「点击或 Enter」</li>\n<li>当按下 ESC 键时</li>\n<li>当光标的左侧无 <code class=\"language-text\">measurePrefix</code> 时</li>\n</ul>\n<h3>注意</h3>\n<p>按下 ESC 键时，此时 <code class=\"language-text\">measureText</code> 中不会包含空格，因此依然满足 <code class=\"language-text\">measuring</code> 为 <code class=\"language-text\">true</code> 的情况，所以需要对 ESC 进行特殊处理：当 <code class=\"language-text\">measuring</code> 为 <code class=\"language-text\">true</code> 时按下 ESC 键时我会将 <code class=\"language-text\">isESC</code> 置为 <code class=\"language-text\">true</code>，而当 <code class=\"language-text\">isESC</code> 为 <code class=\"language-text\">true</code> 时 <code class=\"language-text\">measuring</code> 则至为 <code class=\"language-text\">false</code>。<code class=\"language-text\">isESC</code> 会在下次普通的 <code class=\"language-text\">keyUp</code> 事件中重新置为 <code class=\"language-text\">false</code></p>\n<p><a href=\"https://github.com/MLuminary/Blog/issues/21\">原文链接</a></p>","frontmatter":{"title":"记录使用 hooks 实现 mention 组件的历程","date":"September 20, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/记录使用 hooks 实现 mention 组件的历程/","previous":null,"next":{"fields":{"slug":"/Element 与 renderElement/"},"frontmatter":{"title":"<Element /> 与 renderElement","date":"2019-04-17"}}}}}