{"componentChunkName":"component---src-templates-blog-post-js","path":"/js函数基础/","webpackCompilationHash":"05419f6ab00adf7deb0b","result":{"data":{"site":{"siteMetadata":{"title":"Silence","author":"默尝"}},"markdownRemark":{"id":"b5b459c1-8e2e-5060-aa84-deeb07e4218b","excerpt":"Js…","html":"<h1>Js 函数基础</h1>\n<blockquote>\n<p>记录一下函数基础的知识</p>\n</blockquote>\n<h2>函数的定义</h2>\n<p>函数其实就是一个封装一段代码段的<strong>对象</strong>，那函数名其实仅是用来引用函数对象的一个普通变量</p>\n<p>写代码的时候我们避免不了要重复用一些代码，一直重复写很耗时，而且不美观也不利于维护，因此函数的出现就是来让代码重用，便于维护。</p>\n<p>一段代码，可能被反复使用，可以定义为函数，然后调用函数来使用这段代码。</p>\n<h2>函数的创建</h2>\n<p><strong>function 声明</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">函数名</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">参数列表</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  函数体\n  <span class=\"token keyword\">return</span> 返回值\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>直接量声明</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">函数名</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">参数列表</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  函数体\n  <span class=\"token keyword\">return</span> 返回值\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>用 new 创建</strong></p>\n<p>因为 Function 是内置类型，本身有一个 Function 的构造函数，是内置类型，所以是可以 <code class=\"language-text\">new</code> 的</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> 函数名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数名1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"参数名2\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">...</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"函数体; return 返回值\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这里注意，参数和函数体都要用引号引起来，但是一般函数的创建都不会这样创建，以前面的两种为主，那其实前面两种的创建是存在一定的差别的，下面会提到</p>\n<h2>函数的参数</h2>\n<p>函数执行时必须的数据变量，它分为显示参数(Parameters)与隐式参数(Arguments)</p>\n<h3>显示参数</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//函数体</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这种直接传进来的 name 和 id 就是显示参数，也就是你能看到的。其实函数传递的参数就相当于在函数体内又声明了一个局部变量</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  i<span class=\"token operator\">++</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></code></pre></div>\n<p>上面的代码，就相当于下面的代码</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token comment\">//这个值就是传进来的参数的值</span>\n  i<span class=\"token operator\">++</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\">//在此处传入i</span></code></pre></div>\n<h3>隐式参数</h3>\n<p>每个 JavaScript 函数内部都有一个对象 <code class=\"language-text\">arguments</code> 对象,其实是一个类数组的对象,它会自动接受所有传入函数的参数值。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//arguments[          ]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>值得一说的是,<code class=\"language-text\">arguments</code> 有下标有长度，可以通过下标来获得传入的参数，比如 <code class=\"language-text\">arguments[0]</code> 就是第一个参数, <code class=\"language-text\">length</code> 就可以遍历这个类数组对象，但是，毕竟他不是数组，所以不能进行一些数组特有的操作，比如 <code class=\"language-text\">sort</code></p>\n<h2>声明提前</h2>\n<p>在开始执行程序前,js 引擎会首先查找 <code class=\"language-text\">var</code> 声明的变量和 <code class=\"language-text\">function</code> 声明的函数，将其提前到当前作用域的顶部集中创建，而将赋值操作保留在原地,这里特别说一下,未用 <code class=\"language-text\">var</code> 声明的变量不会声明提前.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">//a is not defined</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">10</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">//undefined</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">//10</span></code></pre></div>\n<p>但是在他下面声明并赋值变量 <code class=\"language-text\">a</code>,因为声明提前,其实代码会变成下面这个样子</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></code></pre></div>\n<p>这样看，一切都变得很合理。。</p>\n<p>函数也是一样</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//2</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//2</span></code></pre></div>\n<p>控制台会输出两个 2,因为 function 声明的函数也会声明提前,代码其实是下面这个样子</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//2</span>\n<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//2</span></code></pre></div>\n<p>第二次声明因为方法名字一样，后者覆盖了前者，所以再调用的时候就会调用最后这个</p>\n<p>但是声明提前会增加程序解读的难度，因此我们在写程序时，尽量避免声明提前所带来的危害</p>\n<h3>声明提前的解决方法</h3>\n<p>那我们既然知道会有声明提前这种操作，就在变量和函数的声明时都放在当前作用域的顶部。</p>\n<p>在 ES6 中 可以用 let 代替 var,不过要求在当前作用域中 let 变量之前不允许出现声明的变量</p>\n<p>也可以用直接量声明变量的方法</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fun</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//1</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fun</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//2</span></code></pre></div>\n<p>这种当然也会声明提前，那我们看一下声明提前后的代码</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> fun\n<span class=\"token keyword\">var</span> fun\n<span class=\"token function-variable function\">fun</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//1</span>\n<span class=\"token function-variable function\">fun</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//2</span></code></pre></div>\n<p>声明提前但是赋值还是留在原地，所以虽然有声明提前，但是并不会改变我们原本想要的结果。也就解决了声明提前带来的危害。</p>\n<h2>匿名函数</h2>\n<p>函数创建时没有指定函数名</p>\n<p>匿名函数使用后自动释放,会节约内存,他会划分临时作用域，避免全局变量污染全局。</p>\n<h3>用处</h3>\n<p><strong>callback</strong></p>\n<p>将一个函数作为参数传入另一个函数内，被其他函数调用</p>\n<p>举个栗子:chestnut:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/reg/g</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">kw<span class=\"token punctuation\">,</span>$<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>$<span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token operator\">...</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> 替换值<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>自调</h4>\n<p>定义函数后自己调用自己，调用结束后，立刻释放，不占内存</p>\n<p>举个例子:chestnut:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">参数列表</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  函数体\n  <span class=\"token keyword\">return</span> 返回值\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>参数值列表<span class=\"token punctuation\">)</span></code></pre></div>\n<p>会定义一个临时的作用域，减少使用全局变量，避免全局污染。</p>\n<h2>重载</h2>\n<p>相同函数名，不同参数列表的多个函数。在调用时，根据传入参数的不同，自动选择匹配的函数执行。</p>\n<p>这样可以减少 api 的数量，减轻调用者的负担。</p>\n<p>听起来很诱人，但是 js 语法不支持重载，原因是 js 不允许多个同名函数同时存在，后声明的函数会覆盖前面声明的。(哇。js 不支持你在这里说什么，神经病啊).</p>\n<p>既然说重载，那肯定是可以通过某些方法实现的。这个方法就是利用 <code class=\"language-text\">arguments</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//不传值的操作</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//传一个值进行的操作</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//....等等</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其实也不是真正意义上的重载，因为并没有创建同名的多个函数，但是实现的效果是和重载差不多的。</p>","frontmatter":{"title":"Js 函数基础","date":"August 17, 2017"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/js函数基础/","previous":{"fields":{"slug":"/你好！BFC/"},"frontmatter":{"title":"你好！BFC!"}},"next":{"fields":{"slug":"/图解作用域及闭包/"},"frontmatter":{"title":"图解作用域及闭包"}}}}}