{"version":3,"sources":["webpack:///./src/components/gitalk/gitTalk.tsx","webpack:///./src/templates/post-detail.tsx","webpack:///./src/components/seo.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header/Header.tsx","webpack:///./src/components/layout/layout.tsx"],"names":["GiTalk","props","useEffect","GitTalk","id","postId","owner","repo","clientID","clientSecret","admin","distractionFreeMode","render","react_default","a","createElement","BlogPostTemplate","_classnames","post","data","markdownRemark","siteTitle","site","siteMetadata","title","_props$pageContext","pageContext","previous","next","spring","useSpring","opacity","transform","from","layout","location","web","div","style","className","Styles","frontmatter","date","dangerouslySetInnerHTML","__html","html","classnames","gatsby_browser_entry","to","rel","gitTalk_GiTalk","Date","getTime","toString","pageQuery","SEO","_ref","description","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","m","module","exports","require","default","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","__webpack_exports__","loader","enqueue","React","createContext","ProdPageRenderer","pageResources","InternalPageRenderer","Object","assign","json","Header","_823847756","es","gatsby_image_default","fixed","avatar","childImageSharp","alt","href","target","Layout","_this$props","this","children","Header_Header","seo","Component"],"mappings":"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","file":"component---src-templates-post-detail-tsx-8141e912e3f330965e61.js","sourcesContent":["import React, { FunctionComponent, useEffect } from 'react'\nimport GitTalk from 'gitalk'\nimport 'gitalk/dist/gitalk.css'\n\ntype Props = {\n  postId: string\n}\n\nexport const GiTalk: FunctionComponent<Props> = (props) => {\n\n  useEffect(() => {\n    const gitalk = new GitTalk({\n      id: props.postId, // optional\n      owner: 'MLuminary',\n      repo: 'hutchins.github.io',\n      clientID: '7337a7896083b307f117',\n      clientSecret: '07a1d88f49a06d948e1a1a5c6f6818dd24456193',\n      admin: ['MLuminary'],\n      distractionFreeMode: false  // Facebook-like distraction free mode\n    })\n    // @ts-ignore\n    gitalk.render('comments')\n  }, [props.postId])\n\n  return <div id='comments'></div>\n}","import React, { FunctionComponent } from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Styles from '../styles/templates/post-detail.module.styl'\nimport Layout from '../components/layout/layout'\nimport { rhythm, scale } from '../utils/typography'\nimport { Site, MarkdownRemark } from '../graphql-types'\nimport classnames from 'classnames'\nimport { GiTalk } from '../components/gitalk'\nimport { animated, useSpring } from 'react-spring'\n\ntype Props = {\n  data: {\n    markdownRemark: MarkdownRemark\n    site: Site\n  }\n  pageContext: {\n    previous: null | MarkdownRemark\n    next: null | MarkdownRemark\n  }\n  location: Location\n}\n\nconst BlogPostTemplate: FunctionComponent<Props> = props => {\n  const post = props.data.markdownRemark\n  const siteTitle = props.data.site.siteMetadata.title // graphql 查询的数据\n  const { previous, next } = props.pageContext // 由 createPage context 传递过来的数据\n\n  const spring = useSpring({ opacity: 1, transform: 'translate3d(0,0,0)', from: { opacity: 0, transform: 'translate3d(0, -50px, 0)' } })\n  return (\n    <Layout post={post} location={props.location} title={siteTitle}>\n      <animated.div style={spring}>\n        <article className={Styles['article']}>\n          <header>\n            <h1 className={Styles['title']}>{post.frontmatter.title}</h1>\n            <p className={Styles['date']}>{post.frontmatter.date}</p>\n          </header>\n          <section className='post-detail-container' dangerouslySetInnerHTML={{ __html: post.html }} />\n        </article>\n        <div className={classnames(Styles['bottom'], { [Styles['havetwo']]: previous && next })}>\n          {previous && (\n            <Link className={Styles['pre']} to={`/post-${previous.frontmatter.date}`} rel='prev'>\n              <i className={classnames(Styles['icon'], 'iconfont', Styles['left'])}>&#xe65d;</i>{' '}\n              <span className={Styles['title']}>{previous.frontmatter.title}</span>\n            </Link>\n          )}\n          {next && (\n            <Link className={Styles['next']} to={`/post-${next.frontmatter.date}`} rel='next'>\n              <span className={Styles['title']}>{next.frontmatter.title}</span>\n              <i className={classnames('iconfont', Styles['icon'])}>&#xe65d;</i>\n            </Link>\n          )}\n        </div>\n        <GiTalk postId={new Date(post.frontmatter.date).getTime().toString()} />\n      </animated.div>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n// 可以接受 createPage 中的 context 作为参数\n// $slug 为 context 中的 slug\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n      }\n    }\n  }\n`\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { Site } from '../graphql-types'\n\ntype Props = {\n  description?: string,\n  lang?: string,\n  meta?: object[],\n  title: string\n}\n\ntype QueryProps = {\n  site: Site\n}\n\nfunction SEO({ description, lang, meta, title }: Props) {\n  const { site } = useStaticQuery<QueryProps>(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `zh`,\n  meta: [],\n  description: ``,\n}\n\nexport default SEO\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React, { FunctionComponent } from 'react'\nimport Styles from './Header.module.styl'\n\nimport Image from 'gatsby-image'\nimport { Link } from '@reach/router'\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { File } from '../../graphql-types'\n\ntype Props = {\n  avatar: File\n}\n\nexport const Header: FunctionComponent = props => {\n\n  const data = useStaticQuery<Props>(graphql`\n    query HeaderQuery {\n      avatar: file(absolutePath: {regex: \"/logo.png/\"}) {\n        childImageSharp {\n          fixed(width: 45, height: 45) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <div className={Styles['container']}>\n      <div className={Styles['header']}>\n        <div className={Styles['logo']}>\n          <Link className={Styles['home']} to='/'>\n            <Image\n              fixed={data.avatar.childImageSharp.fixed}\n              alt={'icon'}\n            />\n          </Link>\n        </div>\n        <div className={Styles['navbar']}>\n          <Link to='/' className={Styles['item']}>\n            <i className='iconfont'>&#xe64f;</i>\n            <span className={Styles['title']}>首页</span>\n          </Link>\n          {/* <Link to='/tags' className={Styles['item']}>\n            <i className='iconfont'>&#xe63e;</i>\n            <span className={Styles['title']}>标签</span>\n          </Link>\n          <Link to='/handbook' className={Styles['item']}>\n            <i className='iconfont'>&#xe898;</i>\n            <span className={Styles['title']}>手册</span>\n          </Link> */}\n          <a className={Styles['item']} href=\"https://github.com/MLuminary\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <i className='iconfont'>&#xe716;</i>\n            <span className={Styles['title']}>GitHub</span>\n          </a>\n          <Link to='/about' className={Styles['item']}>\n            <i className='iconfont'>&#xe604;</i>\n            <span className={Styles['title']}>关于</span>\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}","import React from 'react'\n\nimport { Header } from '../header';\nimport SEO from '../seo';\nimport { MarkdownRemark } from '../../graphql-types';\nimport { Footer } from '../footer';\nimport Styles from './layout.module.styl'\n\ntype Props = {\n  location: Location,\n  title: string,\n  post?: MarkdownRemark\n}\n\nclass Layout extends React.Component<Props> {\n  render() {\n    const { children, title, post } = this.props\n    const description = post ? post.frontmatter ? post.frontmatter.description : '' : ''\n    return (\n      <div className={Styles['container']}>\n        <Header />\n        <SEO\n          title={title}\n          description={description}\n        />\n        <div className={Styles['content']}>\n          {children}\n        </div>\n        {/* <Footer /> */}\n      </div>\n    )\n  }\n}\n\nexport default Layout\n"],"sourceRoot":""}