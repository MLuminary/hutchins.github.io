{"version":3,"sources":["webpack:///./src/components/gitalk/gitTalk.tsx","webpack:///./src/templates/post-detail.tsx","webpack:///./src/styles/templates/post-detail.module.styl"],"names":["GiTalk","props","useEffect","GitTalk","id","postId","owner","repo","clientID","clientSecret","admin","distractionFreeMode","render","Styles","require","isReadme","slug","includes","pageQuery","BlogPostTemplate","showPrevious","showNext","post","data","markdownRemark","pageContext","previous","next","prePath","nextPath","spring","useSpring","opacity","transform","from","layoutCls","div","style","className","frontmatter","title","date","dangerouslySetInnerHTML","__html","html","fields","classnames","to","rel","Date","getTime","toString","module","exports"],"mappings":"mQAQaA,G,UAAmC,SAACC,GAgB/C,OAdAC,qBAAU,WACO,IAAIC,IAAQ,CACzBC,GAAIH,EAAMI,OACVC,MAAO,YACPC,KAAM,qBACNC,SAAU,uBACVC,aAAc,2CACdC,MAAO,CAAC,aACRC,qBAAqB,IAGhBC,OAAO,cACb,CAACX,EAAMI,SAEH,yBAAKD,GAAG,e,YCfXS,EAASC,EAAQ,QAgBjBC,EAAW,SAACC,GAChB,QAASA,YAAMC,SAAS,YAkDbC,GAHEC,UA5CoC,SAAAlB,GAAS,UAK/B,UACnBmB,EACAC,EANFC,EAAOrB,EAAMsB,KAAKC,eADkC,EAEZvB,EAAMwB,YAA5CC,EAFkD,EAElDA,SAAUC,EAFwC,EAExCA,KAAMC,EAFkC,EAElCA,QAASC,EAFyB,EAEzBA,SAC3BC,EAASC,YAAU,CAAEC,QAAS,EAAGC,UAAW,qBAAsBC,KAAM,CAAEF,QAAS,EAAGC,UAAW,8BAwBvG,OACE,kBAAC,IAAD,CAAQE,UAAWtB,EAAM,QACvB,kBAAC,IAASuB,IAAV,CAAcC,MAAOP,GACnB,6BAASQ,UAAWzB,EAAM,SACxB,gCACE,wBAAIyB,UAAWzB,EAAM,OAArB,UAAiCS,EAAKiB,mBAAtC,aAAiC,EAAkBC,OACnD,uBAAGF,UAAWzB,EAAM,MAApB,UAA+BS,EAAKiB,mBAApC,aAA+B,EAAkBE,OAEnD,6BAASH,UAAU,wBAAwBI,wBAAyB,CAAEC,OAAQrB,EAAKsB,UA7BnFxB,EAAeM,IAAaX,EAAQ,UAACW,EAASmB,cAAV,aAAC,EAAiB7B,MACtDK,EAAWM,IAASZ,EAAQ,UAACY,EAAKkB,cAAN,aAAC,EAAa7B,MAE9C,yBAAKsB,UAAWQ,IAAWjC,EAAM,QAAP,OAAsBA,EAAM,SAAeO,GAAgBC,EAA3D,KACvBD,GACC,kBAAC,OAAD,CAAMkB,UAAWzB,EAAM,IAASkC,GAAInB,EAAUoB,IAAI,QAChD,uBAAGV,UAAWQ,IAAWjC,EAAM,KAAU,WAAYA,EAAM,OAA3D,KAAmF,IACnF,0BAAMyB,UAAWzB,EAAM,OAAvB,UAAmCa,EAASa,mBAA5C,aAAmC,EAAsBC,QAG5DnB,GACC,kBAAC,OAAD,CAAMiB,UAAWzB,EAAM,KAAUkC,GAAIlB,EAAWmB,IAAI,QAClD,0BAAMV,UAAWzB,EAAM,OAAvB,UAAmCc,EAAKY,mBAAxC,aAAmC,EAAkBC,OACrD,uBAAGF,UAAWQ,IAAW,WAAYjC,EAAM,OAA3C,QAmBJ,kBAAC,EAAD,CAAQR,OAAQ,IAAI4C,KAAJ,UAAS3B,EAAKiB,mBAAd,aAAS,EAAkBE,MAAMS,UAAUC,gBAS1C,e,qBC3EzBC,EAAOC,QAAU,CAAC,QAAU,qCAAqC,MAAQ,mCAAmC,KAAO,kCAAkC,OAAS,oCAAoC,QAAU,qCAAqC,IAAM,iCAAiC,KAAO,kCAAkC,KAAO,kCAAkC,KAAO","file":"component---src-templates-post-detail-tsx-c07a0a4901c5028b44c6.js","sourcesContent":["import React, { FunctionComponent, useEffect } from 'react'\nimport GitTalk from 'gitalk'\nimport 'gitalk/dist/gitalk.css'\n\ntype Props = {\n  postId: string\n}\n\nexport const GiTalk: FunctionComponent<Props> = (props) => {\n\n  useEffect(() => {\n    const gitalk = new GitTalk({\n      id: props.postId, // optional\n      owner: 'MLuminary',\n      repo: 'hutchins.github.io',\n      clientID: '7337a7896083b307f117',\n      clientSecret: '07a1d88f49a06d948e1a1a5c6f6818dd24456193',\n      admin: ['MLuminary'],\n      distractionFreeMode: false  // Facebook-like distraction free mode\n    })\n    // @ts-ignore\n    gitalk.render('comments')\n  }, [props.postId])\n\n  return <div id='comments'></div>\n}","import React, { FunctionComponent, useMemo } from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Layout from '../components/layout/layout'\nimport { Site, MarkdownRemark } from '../graphql-types'\nimport classnames from 'classnames'\nimport { GiTalk } from '../components/gitalk'\nimport { animated, useSpring } from 'react-spring'\n\nconst Styles = require('../styles/templates/post-detail.module.styl')\n\ntype Props = {\n  data: {\n    markdownRemark: MarkdownRemark\n    site: Site\n  }\n  pageContext: {\n    previous: null | MarkdownRemark\n    next: null | MarkdownRemark\n    prePath: string | null\n    nextPath: string | null\n  }\n  location: Location\n}\n\nconst isReadme = (slug?: string | null) => {\n  return !!slug?.includes('readme')\n}\n\nconst BlogPostTemplate: FunctionComponent<Props> = props => {\n  const post = props.data.markdownRemark\n  const { previous, next, prePath, nextPath } = props.pageContext // 由 createPage context 传递过来的数据\n  const spring = useSpring({ opacity: 1, transform: 'translate3d(0,0,0)', from: { opacity: 0, transform: 'translate3d(0, -50px, 0)' } })\n\n  const renderBottom = () => {\n    const showPrevious = previous && !isReadme(previous.fields?.slug)\n    const showNext = next && !isReadme(next.fields?.slug)\n    return (\n      <div className={classnames(Styles['bottom'], { [Styles['havetwo']]:  showPrevious && showNext })}>\n        {showPrevious && (\n          <Link className={Styles['pre']} to={prePath!} rel='prev'>\n            <i className={classnames(Styles['icon'], 'iconfont', Styles['left'])}>&#xe65d;</i>{' '}\n            <span className={Styles['title']}>{previous.frontmatter?.title}</span>\n          </Link>\n        )}\n        {showNext && (\n          <Link className={Styles['next']} to={nextPath!} rel='next'>\n            <span className={Styles['title']}>{next.frontmatter?.title}</span>\n            <i className={classnames('iconfont', Styles['icon'])}>&#xe65d;</i>\n          </Link>\n        )}\n      </div>\n    )\n  }\n\n\n  return (\n    <Layout layoutCls={Styles['layout']}>\n      <animated.div style={spring}>\n        <article className={Styles['article']}>\n          <header>\n            <h1 className={Styles['title']}>{post.frontmatter?.title}</h1>\n            <p className={Styles['date']}>{post.frontmatter?.date}</p>\n          </header>\n          <section className='post-detail-container' dangerouslySetInnerHTML={{ __html: post.html! }} />\n        </article>\n        { renderBottom() }\n        <GiTalk postId={new Date(post.frontmatter?.date).getTime().toString()} />\n      </animated.div>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n// 可以接受 createPage 中的 context 作为参数\n// $slug 为 context 中的 slug\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n      }\n    }\n  }\n`\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"article\":\"post-detail-module--article--QzxVM\",\"title\":\"post-detail-module--title--2D9eH\",\"date\":\"post-detail-module--date--1N9NU\",\"bottom\":\"post-detail-module--bottom--3qZNG\",\"havetwo\":\"post-detail-module--havetwo--1FmMJ\",\"pre\":\"post-detail-module--pre--27F9-\",\"next\":\"post-detail-module--next--3pbC3\",\"icon\":\"post-detail-module--icon--19oCT\",\"left\":\"post-detail-module--left--65_U0\"};"],"sourceRoot":""}