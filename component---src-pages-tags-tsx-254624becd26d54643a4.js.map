{"version":3,"sources":["webpack:///./src/pages/tags.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./node_modules/classnames/index.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.tsx","webpack:///./src/components/header/Header.tsx","webpack:///./src/components/layout/layout.tsx","webpack:///./src/components/post-item/postItem.component.tsx","webpack:///./src/components/post-item/index.ts"],"names":["Styles","require","Tags","_ref","location","_ref$data","data","site","allMarkdownRemark","tags","useMemo","_tags","edges","forEach","edge","concat","node","frontmatter","Array","from","Set","sort","_useState","useState","selectedTag","setSelectedTag","posts","filter","some","tag","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","_components_layout_layout__WEBPACK_IMPORTED_MODULE_8__","title","siteMetadata","className","map","_classnames","onClick","classnames","key","post","_components_post_item__WEBPACK_IMPORTED_MODULE_10__","id","query","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","__webpack_exports__","loader","enqueue","React","createContext","m","module","exports","default","__WEBPACK_AMD_DEFINE_RESULT__","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","isArray","inner","apply","call","join","undefined","ProdPageRenderer","pageResources","InternalPageRenderer","Object","assign","json","SEO","description","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","defaultProps","Header","props","_1010214409","react_default","gatsby_browser_entry","to","gatsby_image_default","fixed","avatar","childImageSharp","alt","activeClassName","partiallyActive","href","target","rel","Layout","render","_this$props","this","children","contentStyle","Header_Header","seo","style","Component","monthInEng","PostItem","Date","date","getMonth","getDate","getFullYear","fields","slug","Fragment","timeToRead","react_markdown_default","source","excerpt","postItem_component_PostItem"],"mappings":"0OAOMA,EAASC,EAAQ,KA+CRC,UArCwB,SAAAC,GAAqD,IAAlDC,EAAkDD,EAAlDC,SAAkDC,EAAAF,EAAxCG,KAAQC,EAAgCF,EAAhCE,KAAMC,EAA0BH,EAA1BG,kBAC1DC,EAAOC,kBAAkB,WAC7B,IAAIC,EAAQ,GAKZ,OAHAH,EAAkBI,MAAMC,QAAQ,SAAAC,GAC9BH,EAAQA,EAAMI,OAAOD,EAAKE,KAAKC,YAAYR,QAEtCS,MAAMC,KAAK,IAAIC,IAAIT,IAAQU,QACjC,CAACb,EAAkBI,QARoEU,EAUpDC,mBAASd,EAAK,IAA7Ce,EAVmFF,EAAA,GAUtEG,EAVsEH,EAAA,GAYpFI,EAAQhB,kBAAQ,kBAAMF,EAAkBI,MAAMe,OAAO,SAAAb,GAAI,OAAIA,EAAKE,KAAKC,YAAYR,KAAKmB,KAAK,SAAAC,GAAG,OAAIA,IAAQL,OAAe,CAC/HA,IAGF,OACEM,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQ7B,SAAUA,EAAU8B,MAAO3B,EAAK4B,aAAaD,OACnDJ,EAAAC,EAAAC,cAAA,OAAKI,UAAWpC,EAAM,QAAtB,UACA8B,EAAAC,EAAAC,cAAA,OAAKI,UAAWpC,EAAM,WACnBS,EAAK4B,IAAI,SAAAR,GAAG,IAAAS,EAAA,OACXR,EAAAC,EAAAC,cAAA,QACEO,QAAS,kBAAMd,EAAeI,IAC9BO,UAAWI,IAAWxC,EAAM,UAAPsC,EAAA,GAAAA,EAAwBtC,EAAM,QAAawB,IAAgBK,EAA3DS,IACrBG,IAAKZ,GAHP,IAKIA,MAIPH,EAAMW,IAAI,SAAAK,GACT,OAAOA,EAAK1B,MAAQc,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAUF,IAAKC,EAAK1B,KAAK4B,GAAI5B,KAAM0B,EAAK1B,KAAMoB,UAAWpC,EAAM,gBAQpF,IAAM6C,EAAK,+CCxDlB,IAAAC,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,IAAAI,EAAAJ,EAAAE,EAAAC,GAAAH,EAAAK,EAAAC,EAAA,sBAAAF,EAAApB,IAAAgB,EAAAK,EAAAC,EAAA,sBAAAH,EAAA,WAAAH,EAAA,KAAAA,EAAA,IAcyBO,QAAOC,QAELC,IAAMC,cAAc,yBChB/C,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWzD,EAAQ,OALRyD,EAAEG,SAAYH,uBCA/C,IAAAI,EAAAf,EAAQ,IASR,WACA,aAEA,IAAAgB,EAAA,GAAiBC,eAEjB,SAAAC,IAGA,IAFA,IAAAC,EAAA,GAEAC,EAAA,EAAmBA,EAAAC,UAAAC,OAAsBF,IAAA,CACzC,IAAAG,EAAAF,UAAAD,GACA,GAAAG,EAAA,CACA,IAAAC,SAAAD,EAEA,cAAAC,GAAA,WAAAA,EACAL,EAAAM,KAAAF,QACO,GAAApD,MAAAuD,QAAAH,MAAAD,OAAA,CACP,IAAAK,EAAAT,EAAAU,MAAA,KAAAL,GAEAI,GACAR,EAAAM,KAAAE,QAEO,cAAAH,EACP,QAAA9B,KAAA6B,EACAP,EAAAa,KAAAN,EAAA7B,IAAA6B,EAAA7B,IACAyB,EAAAM,KAAA/B,IAMA,OAAAyB,EAAAW,KAAA,KAGmClB,EAAAC,SACnCK,EAAA,QAAAA,EACAN,EAAAC,QAAAK,QAKKa,KAFsBhB,EAAA,WAC3B,OAAAG,GACKU,MAAAf,EAFoB,OAEpBD,EAAAC,QAAAE,GAxCL,8ECaeiB,UAjBU,SAAA5E,GAAiC,IAA9BC,EAA8BD,EAA9BC,SAAU4E,EAAoB7E,EAApB6E,cACpC,OAAKA,EAGExB,IAAMxB,cAAciD,IAApBC,OAAAC,OAAA,CACL/E,WACA4E,iBACGA,EAAcI,OALV,uFCgBX,SAASC,EAATlF,GAAwD,IAAzCmF,EAAyCnF,EAAzCmF,YAAaC,EAA4BpF,EAA5BoF,KAAMC,EAAsBrF,EAAtBqF,KAAMtD,EAAgB/B,EAAhB+B,MAC9B3B,EAD8CkF,EAAAnF,KAC9CC,KAcFmF,EAAkBJ,GAAe/E,EAAK4B,aAAamD,YAEzD,OACEK,EAAA5D,EAAAC,cAAC4D,EAAA7D,EAAD,CACE8D,eAAgB,CACdN,QAEFrD,MAAOA,EACP4D,cAAa,QAAUvF,EAAK4B,aAAaD,MACzCsD,KAAM,CACJ,CACEO,KAAI,cACJC,QAASN,GAEX,CACEO,SAAQ,WACRD,QAAS9D,GAEX,CACE+D,SAAQ,iBACRD,QAASN,GAEX,CACEO,SAAQ,UACRD,QAAO,WAET,CACED,KAAI,eACJC,QAAO,WAET,CACED,KAAI,kBACJC,QAASzF,EAAK4B,aAAa+D,QAE7B,CACEH,KAAI,gBACJC,QAAS9D,GAEX,CACE6D,KAAI,sBACJC,QAASN,IAEX3E,OAAOyE,KAKfH,EAAIc,aAAe,CACjBZ,KAAI,KACJC,KAAM,GACNF,YAAW,IAGED,w+BCrFTrF,EAASC,EAAQ,KAMVmG,EAA4B,SAAAC,GACvC,IAAM/F,EAAOgG,EAAAhG,KAYb,OACEiG,EAAAxE,EAAAC,cAAA,OAAKI,UAAWpC,EAAM,WACpBuG,EAAAxE,EAAAC,cAAA,OAAKI,UAAWpC,EAAM,QACpBuG,EAAAxE,EAAAC,cAAA,OAAKI,UAAWpC,EAAM,MACpBuG,EAAAxE,EAAAC,cAACwE,EAAA,EAAD,CAAMpE,UAAWpC,EAAM,KAAUyG,GAAG,KAClCF,EAAAxE,EAAAC,cAAC0E,EAAA3E,EAAD,CAAO4E,MAAOrG,EAAKsG,OAAOC,gBAAgBF,MAAOG,IAAK,WAG1DP,EAAAxE,EAAAC,cAAA,OAAKI,UAAWpC,EAAM,QACpBuG,EAAAxE,EAAAC,cAACwE,EAAA,EAAD,CAAMO,gBAAiB/G,EAAM,OAAYyG,GAAG,SAASrE,UAAWpC,EAAM,MACpEuG,EAAAxE,EAAAC,cAAA,KAAGI,UAAU,YAAb,KACAmE,EAAAxE,EAAAC,cAAA,QAAMI,UAAWpC,EAAM,OAAvB,OAEFuG,EAAAxE,EAAAC,cAACwE,EAAA,EAAD,CAAMO,gBAAiB/G,EAAM,OAAYyG,GAAG,QAAQrE,UAAWpC,EAAM,MACnEuG,EAAAxE,EAAAC,cAAA,KAAGI,UAAU,YAAb,KACAmE,EAAAxE,EAAAC,cAAA,QAAMI,UAAWpC,EAAM,OAAvB,OAEFuG,EAAAxE,EAAAC,cAACwE,EAAA,EAAD,CAAMQ,iBAAiB,EAAMD,gBAAiB/G,EAAM,OAAYyG,GAAG,UAAUrE,UAAWpC,EAAM,MAC5FuG,EAAAxE,EAAAC,cAAA,KAAGI,UAAU,YAAb,KACAmE,EAAAxE,EAAAC,cAAA,QAAMI,UAAWpC,EAAM,OAAvB,OAEFuG,EAAAxE,EAAAC,cAAA,KAAGI,UAAWpC,EAAM,KAAUiH,KAAK,+BAA+BC,OAAO,SAASC,IAAI,uBACpFZ,EAAAxE,EAAAC,cAAA,KAAGI,UAAU,YAAb,KACAmE,EAAAxE,EAAAC,cAAA,QAAMI,UAAWpC,EAAM,OAAvB,WAEFuG,EAAAxE,EAAAC,cAACwE,EAAA,EAAD,CAAMO,gBAAiB/G,EAAM,OAAYyG,GAAG,SAASrE,UAAWpC,EAAM,MACpEuG,EAAAxE,EAAAC,cAAA,KAAGI,UAAU,YAAb,KACAmE,EAAAxE,EAAAC,cAAA,QAAMI,UAAWpC,EAAM,OAAvB,oBC7CZ,IAAMA,EAASC,EAAQ,KASjBmH,kLACJC,OAAA,WAAS,IAAAC,EACyCC,KAAKlB,MAA7CmB,EADDF,EACCE,SAAUtF,EADXoF,EACWpF,MAAOQ,EADlB4E,EACkB5E,KAAM+E,EADxBH,EACwBG,aACzBnC,EAAc5C,GAAQA,EAAKzB,YAAcyB,EAAKzB,YAAYqE,YAAoB,GACpF,OACEiB,EAAAxE,EAAAC,cAAA,OAAKI,UAAWpC,EAAM,WACpBuG,EAAAxE,EAAAC,cAAC0F,EAAD,MACAnB,EAAAxE,EAAAC,cAAC2F,EAAA,EAAD,CAAKzF,MAAOA,EAAOoD,YAAaA,IAChCiB,EAAAxE,EAAAC,cAAA,OAAK4F,MAAOH,EAAcrF,UAAWpC,EAAM,SACxCwH,QATUhE,IAAMqE,WAiBZT,yGC3BTpH,EAASC,EAAQ,KAOjB6H,EAAa,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEpFC,EAAqC,SAAA5H,GAAyB,IAAtBa,EAAsBb,EAAtBa,KAAMoB,EAAgBjC,EAAhBiC,UACzD,OACEmE,EAAAxE,EAAAC,cAAA,OAAKI,UAAWI,IAAWxC,EAAM,KAAUoC,IACzCmE,EAAAxE,EAAAC,cAAA,OAAKI,UAAWpC,EAAM,MACpBuG,EAAAxE,EAAAC,cAAA,OAAKI,UAAWpC,EAAM,IACpBuG,EAAAxE,EAAAC,cAAA,OAAKI,UAAWpC,EAAM,OAAY8H,EAAW,IAAIE,KAAKhH,EAAKC,YAAYgH,MAAMC,aAC7E3B,EAAAxE,EAAAC,cAAA,OAAKI,UAAWpC,EAAM,KAAU,IAAIgI,KAAKhH,EAAKC,YAAYgH,MAAME,YAElE5B,EAAAxE,EAAAC,cAAA,OAAKI,UAAWpC,EAAM,MAAW,IAAIgI,KAAKhH,EAAKC,YAAYgH,MAAMG,gBAEnE7B,EAAAxE,EAAAC,cAAA,OAAKI,UAAWpC,EAAM,SACpBuG,EAAAxE,EAAAC,cAAA,OAAKI,UAAWpC,EAAM,QACpBuG,EAAAxE,EAAAC,cAACwE,EAAA,EAAD,CAAMpE,UAAWpC,EAAM,MAAWyG,GAAE,SAAWzF,EAAKC,YAAYgH,MAC7DjH,EAAKC,YAAYiB,OAASlB,EAAKqH,OAAOC,OAG3C/B,EAAAxE,EAAAC,cAAA,OAAKI,UAAWpC,EAAM,MACnBgB,EAAKC,YAAYR,KAAK4B,IAAI,SAAAR,GAAG,OAC5B0E,EAAAxE,EAAAC,cAACuE,EAAAxE,EAAMwG,SAAP,CAAgB9F,IAAKZ,GACnB0E,EAAAxE,EAAAC,cAAA,KAAGI,UAAU,YAAb,KACAmE,EAAAxE,EAAAC,cAACwE,EAAA,EAAD,CAAMC,GAAG,QAAQrE,UAAWpC,EAAM,KAC/B6B,GAEH0E,EAAAxE,EAAAC,cAAA,QAAMI,UAAWpC,EAAM,MAAvB,QAGHgB,EAAKwH,WAAa,EAVrB,YAWEjC,EAAAxE,EAAAC,cAAA,QAAMI,UAAWpC,EAAM,MACrBuG,EAAAxE,EAAAC,cAAA,QAAMI,UAAWpC,EAAM,MAAvB,KACC,IAAIgI,KAAKhH,EAAKC,YAAYgH,MAAMG,cACjC7B,EAAAxE,EAAAC,cAAA,iBACC,IAAIgG,KAAKhH,EAAKC,YAAYgH,MAAMC,WAAa,EAC9C3B,EAAAxE,EAAAC,cAAA,iBACC,IAAIgG,KAAKhH,EAAKC,YAAYgH,MAAME,UACjC5B,EAAAxE,EAAAC,cAAA,mBAGJuE,EAAAxE,EAAAC,cAAA,OAAKI,UAAWpC,EAAM,OACpBuG,EAAAxE,EAAAC,cAACyG,EAAA1G,EAAD,CAAe2G,OAAQ1H,EAAKC,YAAYqE,aAAetE,EAAK2H,WAE9DpC,EAAAxE,EAAAC,cAACwE,EAAA,EAAD,CAAMC,GAAE,SAAWzF,EAAKC,YAAYgH,KAAQ7F,UAAWpC,EAAM,MAA7D,gBCvDR+C,EAAAK,EAAAC,EAAA,sBAAAuF","file":"component---src-pages-tags-tsx-254624becd26d54643a4.js","sourcesContent":["import React, { FunctionComponent, useMemo, useState } from 'react'\nimport Layout from '../components/layout/layout'\nimport { MarkdownRemarkConnection, Site } from '@/graphql-types'\nimport classnames from 'classnames'\nimport { PostItem } from '../components/post-item'\nimport { graphql } from 'gatsby'\n\nconst Styles = require('../styles/pages/tags.module.styl')\n\ntype Props = {\n  data: {\n    allMarkdownRemark: MarkdownRemarkConnection\n    site: Site\n  }\n  location: Location\n}\n\nconst Tags: FunctionComponent<Props> = ({ location, data: { site, allMarkdownRemark } }) => {\n  const tags = useMemo<string[]>(() => {\n    let _tags = []\n\n    allMarkdownRemark.edges.forEach(edge => {\n      _tags = _tags.concat(edge.node.frontmatter.tags)\n    })\n    return Array.from(new Set(_tags)).sort()\n  }, [allMarkdownRemark.edges])\n\n  const [selectedTag, setSelectedTag] = useState(tags[0])\n\n  const posts = useMemo(() => allMarkdownRemark.edges.filter(edge => edge.node.frontmatter.tags.some(tag => tag === selectedTag)), [\n    selectedTag,\n  ])\n\n  return (\n    <Layout location={location} title={site.siteMetadata.title}>\n      <div className={Styles['header']}> Tags </div>\n      <div className={Styles['tags_wrap']}>\n        {tags.map(tag => (\n          <span\n            onClick={() => setSelectedTag(tag)}\n            className={classnames(Styles['tag_item'], { [Styles['active']]: selectedTag === tag })}\n            key={tag}\n          >\n            #{tag}\n          </span>\n        ))}\n      </div>\n      {posts.map(post => {\n        return post.node && <PostItem key={post.node.id} node={post.node} className={Styles['post_item']} />\n      })}\n    </Layout>\n  )\n}\n\nexport default Tags\n\nexport const query = graphql`\n  query TagQuery {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(filter: { fileAbsolutePath: { regex: \"/blog/\" } }) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            description\n            tags\n            title\n          }\n          fields {\n            slug\n          }\n          fileAbsolutePath\n          wordCount {\n            words\n          }\n          timeToRead\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","require(\"core-js/modules/es6.array.is-array\");\n\n/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n\n/* global define */\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n\n  function classNames() {\n    var classes = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) continue;\n      var argType = typeof arg;\n\n      if (argType === 'string' || argType === 'number') {\n        classes.push(arg);\n      } else if (Array.isArray(arg) && arg.length) {\n        var inner = classNames.apply(null, arg);\n\n        if (inner) {\n          classes.push(inner);\n        }\n      } else if (argType === 'object') {\n        for (var key in arg) {\n          if (hasOwn.call(arg, key) && arg[key]) {\n            classes.push(key);\n          }\n        }\n      }\n    }\n\n    return classes.join(' ');\n  }\n\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames[\"default\"] = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { Site } from '../graphql-types'\n\ntype Props = {\n  description?: string\n  lang?: string\n  meta?: object[]\n  title: string\n}\n\ntype QueryProps = {\n  site: Site\n}\n\nfunction SEO({ description, lang, meta, title }: Props) {\n  const { site } = useStaticQuery<QueryProps>(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta as any)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `zh`,\n  meta: [],\n  description: ``,\n}\n\nexport default SEO\n","import React, { FunctionComponent } from 'react'\n\nimport Image from 'gatsby-image'\nimport { useStaticQuery, graphql, Link } from 'gatsby'\nimport { File } from '../../graphql-types'\n\nconst Styles = require('./Header.module.styl')\n\ntype Props = {\n  avatar: File\n}\n\nexport const Header: FunctionComponent = props => {\n  const data = useStaticQuery<Props>(graphql`\n    query HeaderQuery {\n      avatar: file(absolutePath: { regex: \"/logo.png/\" }) {\n        childImageSharp {\n          fixed(width: 45, height: 45) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <div className={Styles['container']}>\n      <div className={Styles['header']}>\n        <div className={Styles['logo']}>\n          <Link className={Styles['home']} to='/'>\n            <Image fixed={data.avatar.childImageSharp.fixed} alt={'icon'} />\n          </Link>\n        </div>\n        <div className={Styles['navbar']}>\n          <Link activeClassName={Styles['active']} to='/posts' className={Styles['item']}>\n            <i className='iconfont'>&#xe64f;</i>\n            <span className={Styles['title']}>首页</span>\n          </Link>\n          <Link activeClassName={Styles['active']} to='/tags' className={Styles['item']}>\n            <i className='iconfont'>&#xe63e;</i>\n            <span className={Styles['title']}>标签</span>\n          </Link>\n          <Link partiallyActive={true} activeClassName={Styles['active']} to='/series' className={Styles['item']}>\n            <i className='iconfont'>&#xe898;</i>\n            <span className={Styles['title']}>系列</span>\n          </Link>\n          <a className={Styles['item']} href='https://github.com/MLuminary' target='_blank' rel='noopener noreferrer'>\n            <i className='iconfont'>&#xe716;</i>\n            <span className={Styles['title']}>GitHub</span>\n          </a>\n          <Link activeClassName={Styles['active']} to='/about' className={Styles['item']}>\n            <i className='iconfont'>&#xe604;</i>\n            <span className={Styles['title']}>关于</span>\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { CSSProperties } from 'react'\n\nimport { Header } from '../header'\nimport SEO from '../seo'\nimport { MarkdownRemark } from '../../graphql-types'\nimport { Footer } from '../footer'\n\nconst Styles = require('./layout.module.styl')\n\ntype Props = {\n  location: Location\n  title: string\n  post?: MarkdownRemark\n  contentStyle?: CSSProperties\n}\n\nclass Layout extends React.Component<Props> {\n  render() {\n    const { children, title, post, contentStyle } = this.props\n    const description = post ? (post.frontmatter ? post.frontmatter.description : '') : ''\n    return (\n      <div className={Styles['container']}>\n        <Header />\n        <SEO title={title} description={description} />\n        <div style={contentStyle} className={Styles['content']}>\n          {children}\n        </div>\n        {/* <Footer /> */}\n      </div>\n    )\n  }\n}\n\nexport default Layout\n","import React, { FunctionComponent } from 'react'\nimport { MarkdownRemark } from '@/graphql-types'\nimport { Link } from 'gatsby'\nimport ReactMarkdown from 'react-markdown'\nimport classnames from 'classnames'\n\nconst Styles = require('./postItem.module.styl')\n\ntype Props = {\n  node: MarkdownRemark\n  className?: string\n}\n\nconst monthInEng = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']\n\nexport const PostItem: FunctionComponent<Props> = ({ node, className }) => {\n  return (\n    <div className={classnames(Styles['post'], className)}>\n      <div className={Styles['date']}>\n        <div className={Styles['up']}>\n          <div className={Styles['month']}>{monthInEng[new Date(node.frontmatter.date).getMonth()]}</div>\n          <div className={Styles['day']}>{new Date(node.frontmatter.date).getDate()}</div>\n        </div>\n        <div className={Styles['year']}>{new Date(node.frontmatter.date).getFullYear()}</div>\n      </div>\n      <div className={Styles['content']}>\n        <div className={Styles['header']}>\n          <Link className={Styles['title']} to={`/post-${node.frontmatter.date}`}>\n            {node.frontmatter.title || node.fields.slug}\n          </Link>\n        </div>\n        <div className={Styles['info']}>\n          {node.frontmatter.tags.map(tag => (\n            <React.Fragment key={tag}>\n              <i className='iconfont'>&#xe63e;</i>\n              <Link to='/tags' className={Styles['tag']}>\n                {tag}\n              </Link>\n              <span className={Styles['line']}>·</span>\n            </React.Fragment>\n          ))}\n          {node.timeToRead + 1} min read\n          <span className={Styles['time']}>\n            <span className={Styles['line']}>·</span>\n            {new Date(node.frontmatter.date).getFullYear()}\n            <span>年</span>\n            {new Date(node.frontmatter.date).getMonth() + 1}\n            <span>月</span>\n            {new Date(node.frontmatter.date).getDate()}\n            <span>日</span>\n          </span>\n        </div>\n        <div className={Styles['brief']}>\n          <ReactMarkdown source={node.frontmatter.description || node.excerpt} />\n        </div>\n        <Link to={`/post-${node.frontmatter.date}`} className={Styles['more']}>\n          Read More\n        </Link>\n      </div>\n    </div>\n  )\n}\n","export * from './postItem.component'\n"],"sourceRoot":""}