{"version":3,"sources":["webpack:///./src/pages/series.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.tsx","webpack:///./src/components/header/Header.tsx","webpack:///./src/components/layout/layout.tsx"],"names":["Styles","require","Books","_ref","location","_ref$data","data","site","allMarkdownRemark","colors","series","edges","reduce","pre","cur","path","node","fileAbsolutePath","timeToRead","date","frontmatter","description","book","substring","search","split","name","replace","react__WEBPACK_IMPORTED_MODULE_8___default","a","createElement","_components_layout_layout__WEBPACK_IMPORTED_MODULE_9__","title","siteMetadata","className","Object","keys","map","key","gatsby__WEBPACK_IMPORTED_MODULE_10__","to","style","backgroundColor","Math","ceil","random","length","react_markdown__WEBPACK_IMPORTED_MODULE_11___default","source","count","query","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","__webpack_exports__","loader","enqueue","React","createContext","m","module","exports","default","ProdPageRenderer","pageResources","InternalPageRenderer","assign","json","SEO","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","content","property","author","concat","defaultProps","Header","props","_1010214409","react_default","gatsby_browser_entry","gatsby_image_default","fixed","avatar","childImageSharp","alt","activeClassName","partiallyActive","href","target","rel","Layout","render","_this$props","this","children","post","contentStyle","Header_Header","seo","Component"],"mappings":"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","file":"component---src-pages-series-tsx-91c105ec9f73dd97b886.js","sourcesContent":["import { FunctionComponent } from 'react'\nimport React from 'react'\nimport Layout from '../components/layout/layout'\nimport { Site, MarkdownRemarkConnection } from '../graphql-types'\nimport { graphql, Link } from 'gatsby'\nimport ReactMarkdown from 'react-markdown'\n\nconst Styles = require('../styles/pages/series.module.styl')\n\ntype Props = {\n  data: {\n    site: Site\n    allMarkdownRemark: MarkdownRemarkConnection\n  }\n  location: Location\n}\n\nconst Books: FunctionComponent<Props> = ({ location, data: { site, allMarkdownRemark } }) => {\n  const colors = ['#FFE3EB', '#F7F6B7', '#DBF7B7', '#CDF7F2', '#E4DAF7']\n\n  const series = allMarkdownRemark.edges.reduce((pre, cur) => {\n    const path = cur.node.fileAbsolutePath\n    const timeToRead = cur.node.timeToRead\n    const date = cur.node.frontmatter.date\n    const description = cur.node.frontmatter.description\n    const book = path.substring(path.search('/series/')).split('/')[2]\n\n    if (!pre[book]) pre[book] = { name: book.replace(/-/, ' ') }\n    pre[book]['count'] ? pre[book]['count']++ : (pre[book]['count'] = 1)\n    pre[book]['timeToRead'] ? (pre[book]['timeToRead'] += timeToRead) : (pre[book]['timeToRead'] = timeToRead)\n    if (date) {\n      pre[book]['date'] = date\n      pre[book]['description'] = description\n    }\n    return pre\n  }, {})\n\n  return (\n    <Layout location={location} title={site.siteMetadata.title}>\n      <div className={Styles['header']}> Series </div>\n      <div className={Styles['line']} />\n      <div className={Styles['book_wrap']}>\n        {Object.keys(series).map(key => (\n          <Link key={key} to={`/series/${key}/readme`} className={Styles['book_item']}>\n            <div style={{ backgroundColor: colors[Math.ceil(Math.random() * (colors.length - 1))] }} className={Styles['book_cover']} />\n            <div className={Styles['book_content']}>\n              <div className={Styles['book_title']}>{series[key].name}</div>\n              <div className={Styles['book_des']}>\n                <ReactMarkdown source={series[key].description} />\n              </div>\n              <div className={Styles['book_info']}>\n                共 {series[key].count} 篇系列文章 · 推荐阅读时长 {series[key].timeToRead} 分\n              </div>\n            </div>\n          </Link>\n        ))}\n      </div>\n    </Layout>\n  )\n}\n\nexport default Books\n\nexport const query = graphql`\n  query BookQuery {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(filter: { fileAbsolutePath: { regex: \"/series/\" } }) {\n      edges {\n        node {\n          fileAbsolutePath\n          frontmatter {\n            date\n            description\n          }\n          timeToRead\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { Site } from '../graphql-types'\n\ntype Props = {\n  description?: string\n  lang?: string\n  meta?: object[]\n  title: string\n}\n\ntype QueryProps = {\n  site: Site\n}\n\nfunction SEO({ description, lang, meta, title }: Props) {\n  const { site } = useStaticQuery<QueryProps>(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta as any)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `zh`,\n  meta: [],\n  description: ``,\n}\n\nexport default SEO\n","import React, { FunctionComponent } from 'react'\n\nimport Image from 'gatsby-image'\nimport { useStaticQuery, graphql, Link } from 'gatsby'\nimport { File } from '../../graphql-types'\n\nconst Styles = require('./Header.module.styl')\n\ntype Props = {\n  avatar: File\n}\n\nexport const Header: FunctionComponent = props => {\n  const data = useStaticQuery<Props>(graphql`\n    query HeaderQuery {\n      avatar: file(absolutePath: { regex: \"/logo.png/\" }) {\n        childImageSharp {\n          fixed(width: 45, height: 45) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <div className={Styles['container']}>\n      <div className={Styles['header']}>\n        <div className={Styles['logo']}>\n          <Link className={Styles['home']} to='/'>\n            <Image fixed={data.avatar.childImageSharp.fixed} alt={'icon'} />\n          </Link>\n        </div>\n        <div className={Styles['navbar']}>\n          <Link activeClassName={Styles['active']} to='/posts' className={Styles['item']}>\n            <i className='iconfont'>&#xe64f;</i>\n            <span className={Styles['title']}>首页</span>\n          </Link>\n          <Link activeClassName={Styles['active']} to='/tags' className={Styles['item']}>\n            <i className='iconfont'>&#xe63e;</i>\n            <span className={Styles['title']}>标签</span>\n          </Link>\n          <Link partiallyActive={true} activeClassName={Styles['active']} to='/series' className={Styles['item']}>\n            <i className='iconfont'>&#xe898;</i>\n            <span className={Styles['title']}>系列</span>\n          </Link>\n          <a className={Styles['item']} href='https://github.com/MLuminary' target='_blank' rel='noopener noreferrer'>\n            <i className='iconfont'>&#xe716;</i>\n            <span className={Styles['title']}>GitHub</span>\n          </a>\n          <Link activeClassName={Styles['active']} to='/about' className={Styles['item']}>\n            <i className='iconfont'>&#xe604;</i>\n            <span className={Styles['title']}>关于</span>\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { CSSProperties } from 'react'\n\nimport { Header } from '../header'\nimport SEO from '../seo'\nimport { MarkdownRemark } from '../../graphql-types'\nimport { Footer } from '../footer'\n\nconst Styles = require('./layout.module.styl')\n\ntype Props = {\n  location: Location\n  title: string\n  post?: MarkdownRemark\n  contentStyle?: CSSProperties\n}\n\nclass Layout extends React.Component<Props> {\n  render() {\n    const { children, title, post, contentStyle } = this.props\n    const description = post ? (post.frontmatter ? post.frontmatter.description : '') : ''\n    return (\n      <div className={Styles['container']}>\n        <Header />\n        <SEO title={title} description={description} />\n        <div style={contentStyle} className={Styles['content']}>\n          {children}\n        </div>\n        {/* <Footer /> */}\n      </div>\n    )\n  }\n}\n\nexport default Layout\n"],"sourceRoot":""}