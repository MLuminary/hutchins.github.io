{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.tsx"],"names":["Styles","require","ReadInBook","sentence","from","Me","_useState","useState","output","setOutput","typer","useRef","currentBook","useMemo","random","Math","ceil","length","useEffect","current","EasyTyper","isEnd","speed","singleBack","sleep","type","backSpeed","sentencePause","close","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","Fragment","_components_seo__WEBPACK_IMPORTED_MODULE_4__","title","className","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","__webpack_exports__","loader","enqueue","React","createContext","m","module","exports","default","ProdPageRenderer","_ref","location","pageResources","InternalPageRenderer","Object","assign","json","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps"],"mappings":"uJAOMA,EAASC,EAAQ,KAcjBC,EAAqB,CACzB,CACEC,SAAU,iCACVC,KAAM,MAER,CACED,SAAU,qCACVC,KAAM,WAER,CACED,SAAU,iCACVC,KAAM,YAyDKC,UArDsB,WAAM,IAAAC,EACbC,mBAAiB,IAAtCC,EADkCF,EAAA,GAC1BG,EAD0BH,EAAA,GAEnCI,EAAQC,mBAERC,EAAcC,kBAAQ,WAC1B,IAAMC,EAASC,KAAKC,KAAKD,KAAKD,SAAWZ,EAAWe,QACpD,OAAOf,EAAWY,IAAWZ,EAAW,IACvC,IA2BH,OAzBAgB,oBAAU,WAsBR,OATAR,EAAMS,QAAU,IAAIC,IAXR,CACVZ,OAAQ,GACRa,OAAO,EACPC,MAAO,IACPC,YAAY,EACZC,MAAO,IACPC,KAAM,SACNC,UAAW,GACXC,eAAe,GAKff,EAAYT,SACZ,aACA,SAAAK,GACEC,EAAUD,KAIP,kBAAME,EAAMS,QAAQS,UAC1B,IAGDC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,MAAM,YACXL,EAAAC,EAAAC,cAAA,OAAKI,UAAWnC,EAAM,SACpB6B,EAAAC,EAAAC,cAAA,OAAKI,UAAWnC,EAAM,MACpB6B,EAAAC,EAAAC,cAAA,OAAKI,UAAWnC,EAAM,UACnBQ,EACDqB,EAAAC,EAAAC,cAAA,QAAMI,UAAWnC,EAAM,QAAvB,MAEF6B,EAAAC,EAAAC,cAAA,OAAKI,UAAWnC,EAAM,MAAtB,OAAqCY,EAAYR,KAAjD,MAEFyB,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMD,UAAWnC,EAAM,KAAUqC,GAAG,UAApC,8CCjFR,IAAAC,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,IAAAI,EAAAJ,EAAAE,EAAAC,GAAAH,EAAAK,EAAAC,EAAA,sBAAAF,EAAAb,IAAAS,EAAAK,EAAAC,EAAA,sBAAAH,EAAA,WAAAH,EAAA,KAAAA,EAAA,IAcyBO,QAAOC,QAELC,IAAMC,cAAc,yBChB/C,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWjD,EAAQ,OALRiD,EAAEG,SAAYH,6ECsBhCI,UAjBU,SAAAC,GAAiC,IAA9BC,EAA8BD,EAA9BC,SAAUC,EAAoBF,EAApBE,cACpC,OAAKA,EAGET,IAAMjB,cAAc2B,IAApBC,OAAAC,OAAA,CACLJ,WACAC,iBACGA,EAAcI,OALV,uFCgBX,SAASC,EAATP,GAAwD,IAAzCQ,EAAyCR,EAAzCQ,YAAaC,EAA4BT,EAA5BS,KAAMC,EAAsBV,EAAtBU,KAAM/B,EAAgBqB,EAAhBrB,MAC9BgC,EAD8CC,EAAAC,KAC9CF,KAcFG,EAAkBN,GAAeG,EAAKI,aAAaP,YAEzD,OACElC,EAAAC,EAAAC,cAACwC,EAAAzC,EAAD,CACE0C,eAAgB,CACdR,QAEF9B,MAAOA,EACPuC,cAAa,QAAUP,EAAKI,aAAapC,MACzC+B,KAAM,CACJ,CACES,KAAI,cACJC,QAASN,GAEX,CACEO,SAAQ,WACRD,QAASzC,GAEX,CACE0C,SAAQ,iBACRD,QAASN,GAEX,CACEO,SAAQ,UACRD,QAAO,WAET,CACED,KAAI,eACJC,QAAO,WAET,CACED,KAAI,kBACJC,QAAST,EAAKI,aAAaO,QAE7B,CACEH,KAAI,gBACJC,QAASzC,GAEX,CACEwC,KAAI,sBACJC,QAASN,IAEXS,OAAOb,KAKfH,EAAIiB,aAAe,CACjBf,KAAI,KACJC,KAAM,GACNF,YAAW,IAGED","file":"component---src-pages-index-tsx-4d4b965523e2ab2b8c6a.js","sourcesContent":["import React, { FunctionComponent, useState, useRef, useEffect, useMemo } from 'react'\nimport { Link } from 'gatsby'\nimport EasyTyper from 'easy-typer-js'\nimport { Site } from '../graphql-types'\n\nimport SEO from '../components/seo'\n\nconst Styles = require('../styles/pages/index.module.styl')\n\ntype Props = {\n  data: {\n    site: Site\n  }\n  location: Location\n}\n\ntype Book = {\n  sentence: string\n  from: string\n}\n\nconst ReadInBook: Book[] = [\n  {\n    sentence: '痛苦是财富，这话是扯淡。痛苦就是痛苦，对痛苦的思考才是财富。',\n    from: '柴静',\n  },\n  {\n    sentence: '负面的情绪就像黑暗一样，你是驱散不走它们的。你唯一做的，就是带进光来',\n    from: '遇见未知的自己',\n  },\n  {\n    sentence: '当你觉得自己不行的时候你就走到斑马线上，这时候你就是个行人了',\n    from: '遇见未知的自己',\n  },\n]\n\nconst Me: FunctionComponent<Props> = () => {\n  const [output, setOutput] = useState<string>('')\n  const typer = useRef<EasyTyper>()\n\n  const currentBook = useMemo(() => {\n    const random = Math.ceil(Math.random() * ReadInBook.length)\n    return ReadInBook[random] || ReadInBook[0]\n  }, [])\n\n  useEffect(() => {\n    // 配置对象\n    const obj = {\n      output: '',\n      isEnd: false,\n      speed: 150,\n      singleBack: false,\n      sleep: 1000,\n      type: 'normal',\n      backSpeed: 40,\n      sentencePause: false,\n    }\n    // 实例化\n    typer.current = new EasyTyper(\n      obj,\n      currentBook.sentence,\n      () => {},\n      output => {\n        setOutput(output)\n      },\n    )\n\n    return () => typer.current.close()\n  }, [])\n\n  return (\n    <>\n      <SEO title=\"it's me\" />\n      <div className={Styles['content']}>\n        <div className={Styles['word']}>\n          <div className={Styles['sentence']}>\n            {output}\n            <span className={Styles['cursor']}>|</span>\n          </div>\n          <div className={Styles['from']}> --《{currentBook.from}》</div>\n        </div>\n        <Link className={Styles['link']} to='/posts'>\n          Enter\n        </Link>\n      </div>\n    </>\n  )\n}\n\nexport default Me\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { Site } from '../graphql-types'\n\ntype Props = {\n  description?: string\n  lang?: string\n  meta?: object[]\n  title: string\n}\n\ntype QueryProps = {\n  site: Site\n}\n\nfunction SEO({ description, lang, meta, title }: Props) {\n  const { site } = useStaticQuery<QueryProps>(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta as any)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `zh`,\n  meta: [],\n  description: ``,\n}\n\nexport default SEO\n"],"sourceRoot":""}