{"version":3,"sources":["webpack:///./src/components/gitalk/gitTalk.tsx","webpack:///./src/templates/post-detail.tsx","webpack:///./src/components/seo.tsx","webpack:///./src/utils/typography.js","webpack:///./src/components/header/Header.tsx","webpack:///./src/components/layout.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["GiTalk","props","useEffect","GitTalk","id","postId","owner","repo","clientID","clientSecret","admin","distractionFreeMode","render","react_default","a","createElement","BlogPostTemplate","_classnames","post","data","markdownRemark","siteTitle","site","siteMetadata","title","_props$pageContext","pageContext","previous","next","layout","location","className","Styles","style","marginTop","rhythm","marginBottom","frontmatter","Object","assign","scale","display","date","dangerouslySetInnerHTML","__html","html","classnames","gatsby_browser_entry","to","fields","slug","rel","gitTalk_GiTalk","Date","getTime","toString","pageQuery","SEO","_ref","description","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","__webpack_require__","d","__webpack_exports__","typography__WEBPACK_IMPORTED_MODULE_0__","typography__WEBPACK_IMPORTED_MODULE_0___default","n","typography_theme_wordpress_2016__WEBPACK_IMPORTED_MODULE_1__","typography_theme_wordpress_2016__WEBPACK_IMPORTED_MODULE_1___default","Wordpress2016","overrideThemeStyles","a.gatsby-resp-image-link","boxShadow","googleFonts","typography","Typography","Header","_823847756","es","gatsby_image_default","fixed","avatar","childImageSharp","alt","href","target","Layout","_this$props","this","children","Fragment","Header_Header","seo","marginLeft","marginRight","maxWidth","padding","React","Component","m","module","exports","require","default","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","loader","enqueue","createContext","ProdPageRenderer","pageResources","InternalPageRenderer","json"],"mappings":"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","file":"component---src-templates-post-detail-tsx-1020b21dde9be373c674.js","sourcesContent":["import React, { FunctionComponent, useEffect } from 'react'\nimport GitTalk from 'gitalk'\nimport 'gitalk/dist/gitalk.css'\n\ntype Props = {\n  postId: string\n}\n\nexport const GiTalk: FunctionComponent<Props> = (props) => {\n\n  useEffect(() => {\n    const gitalk = new GitTalk({\n      id: props.postId, // optional\n      owner: 'MLuminary',\n      repo: 'hutchins.github.io',\n      clientID: '7337a7896083b307f117',\n      clientSecret: 'ef2a7cbd01054e519a2a05cc84c82ce032434b8a',\n      admin: ['MLuminary'],\n      distractionFreeMode: false  // Facebook-like distraction free mode\n    })\n    // @ts-ignore\n    gitalk.render('comments')\n  }, [props.postId])\n\n  return <div id='comments'></div>\n}","import React, { FunctionComponent } from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Styles from '../styles/templates/post-detail.module.styl'\nimport Layout from '../components/layout'\nimport { rhythm, scale } from '../utils/typography'\nimport { Site, MarkdownRemark } from '../graphql-types'\nimport classnames from 'classnames'\nimport { GiTalk } from '../components/gitalk'\n\ntype Props = {\n  data: {\n    markdownRemark: MarkdownRemark,\n    site: Site\n  },\n  pageContext: {\n    previous: null | MarkdownRemark,\n    next: null | MarkdownRemark\n  },\n  location: Location\n}\n\nconst BlogPostTemplate: FunctionComponent<Props> = (props) => {\n  const post = props.data.markdownRemark\n  const siteTitle = props.data.site.siteMetadata.title // graphql 查询的数据\n  const { previous, next } = props.pageContext // 由 createPage context 传递过来的数据\n  return (\n    <Layout post={post} location={props.location} title={siteTitle}>\n      <div className='post-detail-container'>\n        <article className={Styles['article']}>\n          <header>\n            <h1\n              style={{\n                marginTop: rhythm(1),\n                marginBottom: 0\n              }}\n            >\n              {post.frontmatter.title}\n            </h1>\n            <p\n              style={{\n                ...scale(-1 / 5),\n                display: `block`,\n                marginBottom: rhythm(1)\n              }}\n            >\n              {post.frontmatter.date}\n            </p>\n          </header>\n          <section dangerouslySetInnerHTML={{ __html: post.html }} />\n        </article>\n        <div className={classnames(Styles['bottom'], { [Styles['havetwo']]: previous && next })}>\n          {previous && (\n            <Link className={Styles['pre']} to={previous.fields.slug} rel=\"prev\">\n              <i className={classnames(Styles['icon'], 'iconfont', Styles['left'])}>&#xe65d;</i> <span className={Styles['title']}>{previous.frontmatter.title}</span>\n            </Link>\n          )}\n          {next && (\n            <Link className={Styles['next']} to={next.fields.slug} rel=\"next\">\n              <span className={Styles['title']}>{next.frontmatter.title}</span><i className={classnames('iconfont', Styles['icon'])}>&#xe65d;</i>\n            </Link>\n          )}\n        </div>\n        <GiTalk postId={new Date(post.frontmatter.date).getTime().toString()} />\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n// 可以接受 createPage 中的 context 作为参数\n// $slug 为 context 中的 slug\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n      }\n    }\n  }\n`\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { Site } from '../graphql-types'\n\ntype Props = {\n  description?: string,\n  lang?: string,\n  meta?: object[],\n  title: string\n}\n\ntype QueryProps = {\n  site: Site\n}\n\nfunction SEO({ description, lang, meta, title }: Props) {\n  const { site } = useStaticQuery<QueryProps>(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `zh`,\n  meta: [],\n  description: ``,\n}\n\nexport default SEO\n","import Typography from \"typography\"\nimport Wordpress2016 from \"typography-theme-wordpress-2016\"\n\nWordpress2016.overrideThemeStyles = () => {\n  return {\n    \"a.gatsby-resp-image-link\": {\n      boxShadow: `none`,\n    },\n    \"a\": {\n      boxShadow: `none`,\n    }\n  }\n}\n\ndelete Wordpress2016.googleFonts\n\nconst typography = new Typography(Wordpress2016)\n\n// Hot reload typography in development.\nif (process.env.NODE_ENV !== `production`) {\n  typography.injectStyles()\n}\n\nexport default typography\nexport const rhythm = typography.rhythm\nexport const scale = typography.scale\n","import React, { FunctionComponent } from 'react'\nimport Styles from './Header.module.styl'\n\nimport Image from 'gatsby-image'\nimport { Link } from '@reach/router'\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { File } from '../../graphql-types'\n\ntype Props = {\n  avatar: File\n}\n\nexport const Header: FunctionComponent = props => {\n\n  const data = useStaticQuery<Props>(graphql`\n    query HeaderQuery {\n      avatar: file(absolutePath: {regex: \"/logo.png/\"}) {\n        childImageSharp {\n          fixed(width: 45, height: 45) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <div className={Styles['container']}>\n      <div className={Styles['header']}>\n        <div className={Styles['logo']}>\n          <Link className={Styles['home']} to='/'>\n            <Image\n              fixed={data.avatar.childImageSharp.fixed}\n              alt={'icon'}\n            />\n          </Link>\n        </div>\n        <div className={Styles['navbar']}>\n          <Link to='/' className={Styles['item']}>\n            <i className='iconfont'>&#xe64f;</i>\n            <span className={Styles['title']}>首页</span>\n          </Link>\n          {/* <Link to='/tags' className={Styles['item']}>\n            <i className='iconfont'>&#xe63e;</i>\n            <span className={Styles['title']}>标签</span>\n          </Link>\n          <Link to='/handbook' className={Styles['item']}>\n            <i className='iconfont'>&#xe898;</i>\n            <span className={Styles['title']}>手册</span>\n          </Link> */}\n          <a className={Styles['item']} href=\"https://github.com/MLuminary\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <i className='iconfont'>&#xe716;</i>\n            <span className={Styles['title']}>GitHub</span>\n          </a>\n          {/* <Link to='/about' className={Styles['item']}>\n            <i className='iconfont'>&#xe604;</i>\n            <span className={Styles['title']}>关于</span>\n          </Link> */}\n        </div>\n      </div>\n    </div>\n  )\n}","import React from 'react'\n\nimport { rhythm } from '../utils/typography'\nimport { Header } from './header';\nimport SEO from './seo';\nimport { MarkdownRemark } from '../graphql-types';\n\ntype Props = {\n  location: Location,\n  title: string,\n  post?: MarkdownRemark\n}\n\nclass Layout extends React.Component<Props> {\n  render() {\n    const { children, title, post } = this.props\n    const description = post ? post.frontmatter ? post.frontmatter.description : '' : ''\n    return (\n      <>\n        <Header />\n        <SEO\n          title={title}\n          description={description}\n        />\n        <div\n          style={{\n            marginLeft: `auto`,\n            marginRight: `auto`,\n            maxWidth: rhythm(32),\n            padding: `${rhythm(1.5)} ${rhythm(3 / 4)}`\n          }}\n        >\n\n          <main>{children}</main>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default Layout\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}